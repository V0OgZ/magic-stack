#!/usr/bin/env python3
"""
Test unitaire pour sort_teleportation.json
Auteur: URZ-K√îM
Mission: MAGIC_STACK_EXPLORATION Day 7
"""

import unittest
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

from magic_core import MagicCore

class TestSortTeleportation(unittest.TestCase):
    """Tests pour le sort de t√©l√©portation"""
    
    def setUp(self):
        """Initialisation avant chaque test"""
        self.core = MagicCore()
        self.sort_loaded = self.core.charger_sort('grimoire/sort_teleportation.json')
    
    def test_chargement_sort(self):
        """Test du chargement du sort"""
        self.assertTrue(self.sort_loaded, "Le sort doit se charger sans erreur")
        self.assertIn('teleportation', self.core.sorts_charges, "Le sort doit √™tre dans les sorts charg√©s")
    
    def test_structure_sort(self):
        """Test de la structure du sort"""
        sort_data = self.core.sorts_charges.get('teleportation', {})
        
        # Champs obligatoires
        self.assertIn('nom', sort_data, "Le sort doit avoir un nom")
        self.assertIn('formule', sort_data, "Le sort doit avoir une formule")
        self.assertIn('description', sort_data, "Le sort doit avoir une description")
        self.assertIn('cout_mana', sort_data, "Le sort doit avoir un co√ªt en mana")
        
        # Types corrects
        self.assertIsInstance(sort_data['cout_mana'], int, "Le co√ªt mana doit √™tre un entier")
        self.assertGreater(sort_data['cout_mana'], 0, "Le co√ªt mana doit √™tre positif")
    
    def test_formule_grammaire(self):
        """Test de validation de la formule selon la grammaire temporelle"""
        sort_data = self.core.sorts_charges.get('teleportation', {})
        formule = sort_data.get('formule', '')
        
        # Symboles requis
        self.assertIn('‚äô', formule, "La formule doit contenir une superposition ‚äô")
        self.assertIn('‚Üí', formule, "La formule doit contenir une projection ‚Üí")
        self.assertIn('Œît', formule, "La formule doit contenir un delta temporel Œît")
        
        # Structure basique
        self.assertIn('(', formule, "La formule doit contenir des parenth√®ses")
        self.assertIn(')', formule, "La formule doit contenir des parenth√®ses fermantes")
    
    def test_execution_parametres_valides(self):
        """Test d'ex√©cution avec param√®tres valides"""
        params = {
            'entite': 'URZ-KOM',
            'destination': {
                'x': 100,
                'y': 200,
                'dimension': 0
            }
        }
        
        try:
            resultat = self.core.lancer_sort('teleportation', params)
            self.assertIsInstance(resultat, dict, "Le r√©sultat doit √™tre un dictionnaire")
            # Note: Le r√©sultat exact d√©pend de l'impl√©mentation de MagicCore
        except Exception as e:
            self.fail(f"L'ex√©cution du sort ne doit pas lever d'exception: {e}")
    
    def test_execution_parametres_manquants(self):
        """Test avec param√®tres manquants"""
        params = {}  # Param√®tres vides
        
        try:
            resultat = self.core.lancer_sort('teleportation', params)
            # Le sort doit g√©rer gracieusement les param√®tres manquants
            self.assertIsInstance(resultat, dict, "M√™me avec des param√®tres invalides, doit retourner un dict")
        except Exception as e:
            # Si une exception est lev√©e, elle doit √™tre document√©e
            self.assertIsInstance(e, (ValueError, KeyError), f"Exception attendue, re√ßu: {type(e)}")
    
    def test_execution_parametres_invalides(self):
        """Test avec param√®tres de types incorrects"""
        params = {
            'entite': None,  # Invalide
            'destination': "invalid"  # Doit √™tre un dict
        }
        
        try:
            resultat = self.core.lancer_sort('teleportation', params)
            self.assertIsInstance(resultat, dict, "Doit retourner un dict m√™me avec des param√®tres invalides")
        except Exception as e:
            # Exceptions acceptables pour param√®tres invalides
            self.assertIsInstance(e, (TypeError, ValueError, AttributeError), 
                                f"Exception de type attendu, re√ßu: {type(e)}")
    
    def test_performance_execution(self):
        """Test de performance - le sort doit s'ex√©cuter rapidement"""
        import time
        
        params = {
            'entite': 'TestEntity',
            'destination': {'x': 0, 'y': 0, 'dimension': 0}
        }
        
        start_time = time.time()
        try:
            self.core.lancer_sort('teleportation', params)
        except:
            pass  # On teste juste la performance, pas le r√©sultat
        
        execution_time = time.time() - start_time
        self.assertLess(execution_time, 0.1, "L'ex√©cution doit prendre moins de 100ms")
    
    def test_logs_generation(self):
        """Test de g√©n√©ration des logs"""
        params = {
            'entite': 'LogTestEntity',
            'destination': {'x': 42, 'y': 42, 'dimension': 1}
        }
        
        # V√©rifier que les logs sont g√©n√©r√©s (si impl√©ment√©s)
        try:
            self.core.lancer_sort('teleportation', params)
            # Note: V√©rification des logs d√©pend de l'impl√©mentation
            self.assertTrue(True, "Logs g√©n√©r√©s avec succ√®s")
        except Exception as e:
            self.fail(f"La g√©n√©ration de logs ne doit pas faire planter le sort: {e}")

if __name__ == '__main__':
    print("üß™ Test du sort de t√©l√©portation - URZ-K√îM")
    print("=" * 50)
    unittest.main(verbosity=2)