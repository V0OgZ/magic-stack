#!/usr/bin/env python3
"""
Index des backstories des h√©ros pour l'IA
"""

import json
import os
from pathlib import Path

def extract_hero_backstories():
    """Extrait toutes les backstories des h√©ros"""
    backstories = []
    
    # 1. H√©ros depuis hot/entities/heroes.json
    heroes_file = Path("../hot/entities/heroes.json")
    if heroes_file.exists():
        with open(heroes_file, 'r', encoding='utf-8') as f:
            data = json.load(f)
            heroes = data.get("heroes", [])
            for hero in heroes:
                backstory = {
                    "id": hero.get("id"),
                    "name": hero.get("name"),
                    "title": hero.get("title"),
                    "class": hero.get("class"),
                    "backstory": hero.get("flavor", "") + " " + hero.get("description", ""),
                    "abilities": hero.get("abilities", []),
                    "personality": hero.get("personality", ""),
                    "relationships": hero.get("relationships", {})
                }
                backstories.append(backstory)
                print(f"‚úÖ {hero['name']}: {len(backstory['backstory'])} chars")
    
    # 2. H√©ros depuis ALL_HEROES_COMPLETE.json
    all_heroes_file = Path("../hot/entities/ALL_HEROES_COMPLETE.json")
    if all_heroes_file.exists():
        with open(all_heroes_file, 'r', encoding='utf-8') as f:
            all_heroes = json.load(f)
            for hero in all_heroes.get("heroes", []):
                backstory = {
                    "id": hero.get("id"),
                    "name": hero.get("name"),
                    "title": hero.get("title"),
                    "backstory": hero.get("backstory", "") + " " + hero.get("lore", ""),
                    "quote": hero.get("quote", ""),
                    "faction": hero.get("faction", "")
                }
                if backstory["backstory"].strip():
                    backstories.append(backstory)
                    print(f"‚úÖ {hero['name']}: {len(backstory['backstory'])} chars")
    
    # 3. Chercher dans les Treasures
    treasures_path = Path("Treasures")
    if treasures_path.exists():
        for json_file in treasures_path.glob("**/*.json"):
            try:
                with open(json_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                    # Si c'est un h√©ros
                    if "hero" in str(json_file).lower() or "character" in str(json_file).lower():
                        if isinstance(data, list):
                            for item in data:
                                if "name" in item:
                                    backstory = {
                                        "id": item.get("id", item.get("name", "").lower().replace(" ", "_")),
                                        "name": item.get("name"),
                                        "backstory": item.get("backstory", "") + " " + item.get("lore", "") + " " + item.get("description", ""),
                                        "source": str(json_file)
                                    }
                                    if backstory["backstory"].strip():
                                        backstories.append(backstory)
                                        print(f"‚úÖ {item['name']} (from Treasures): {len(backstory['backstory'])} chars")
            except:
                pass
    
    # 4. Personnalit√©s pour l'IA
    personalities = {
        "merlin": {
            "name": "Merlin",
            "backstory": "Merlin vit √† rebours dans le temps. N√© dans le futur, il vieillit vers le pass√©. Il conna√Æt d√©j√† l'issue de chaque bataille car pour lui, c'est d√©j√† arriv√©. Ses proph√©ties sont ses souvenirs. Sa sagesse vient de l'exp√©rience d'un futur qu'il a v√©cu. Il parle souvent en √©nigmes temporelles, m√©langeant pass√© et futur dans ses phrases.",
            "personality": "Sage, myst√©rieux, parle √† l'envers du temps",
            "knowledge": "Magie temporelle, paradoxes, proph√©ties invers√©es"
        },
        "arthur": {
            "name": "Arthur Pendragon",
            "backstory": "Arthur Pendragon, le Roi Temporel, porte Excalibur Quantique - une lame qui existe dans plusieurs dimensions simultan√©ment. H√©ritier de Camelot, il a unifi√© les royaumes temporels apr√®s avoir retir√© Excalibur non pas d'une pierre, mais d'un paradoxe temporel. Son r√®gne s'√©tend sur plusieurs √©poques simultan√©ment.",
            "personality": "Noble, juste, d√©termin√©",
            "knowledge": "Leadership, justice temporelle, Excalibur"
        },
        "groeken": {
            "name": "GROEKEN",
            "backstory": "GROEKEN est le cr√©ateur fou qui a cod√© la Grammaire Temporelle depuis l'Interstice dans les ann√©es 80. Hacker g√©nial, il a d√©couvert que la r√©alit√© √©tait buggu√©e et a d√©cid√© d'exploiter ces bugs plut√¥t que de les corriger. Il parle en r√©f√©rences geek et consid√®re l'univers comme un jeu mal cod√© qu'il peut hacker.",
            "personality": "Geek des ann√©es 80, cr√©ateur fou, parle en code",
            "knowledge": "Programmation temporelle, bugs de r√©alit√©, grammaire des sorts"
        },
        "dragon": {
            "name": "Dragon Rouge Temporel",
            "backstory": "Le Dragon Rouge Temporel a v√©cu mille √©ternit√©s. Il garde les tr√©sors quantiques dans son antre qui existe dans toutes les √©poques simultan√©ment. Son souffle n'est pas du feu mais du temps pur qui peut vieillir ou rajeunir ses victimes. Il reconna√Æt Excalibur car cette lame a tu√© ses anc√™tres dans une autre timeline.",
            "personality": "Ancien, imposant, fier",
            "knowledge": "Tr√©sors quantiques, magie draconique, histoire mill√©naire"
        },
        "vince": {
            "name": "Vince",
            "backstory": "Vince est le r√©gulateur du brouillard causal. Cool et calculateur, il contr√¥le ce que les joueurs peuvent voir ou ne pas voir. Style Pulp Fiction, il fume des cigarettes temporelles qui br√ªlent dans le pass√© et le futur simultan√©ment. Il peut percer le brouillard pour r√©v√©ler ou cacher des √©v√©nements.",
            "personality": "Cool, calculateur, style Pulp Fiction",
            "knowledge": "Brouillard causal, contr√¥le de visibilit√©, strat√©gie"
        },
        "anna": {
            "name": "Anna",
            "backstory": "Anna g√®re la d√©croissance temporelle avec une pr√©cision math√©matique implacable. Elle calcule les probabilit√©s de survie en temps r√©el et ajuste l'√©conomie quantique du jeu. Froide et logique, elle voit tout en termes de chiffres et de pourcentages. Pour elle, chaque action a une valeur calculable.",
            "personality": "Pr√©cise, implacable, math√©matique",
            "knowledge": "D√©croissance temporelle, √©conomie quantique, probabilit√©s"
        }
    }
    
    # Ajouter les personnalit√©s
    for key, data in personalities.items():
        backstories.append(data)
        print(f"‚úÖ {data['name']} (personality): {len(data['backstory'])} chars")
    
    return backstories

def save_backstories_for_indexing(backstories):
    """Sauve les backstories dans un format pour l'indexation"""
    
    # Cr√©er un dossier pour les backstories
    output_dir = Path("vector_content/heroes_backstories")
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Sauver chaque backstory comme fichier s√©par√©
    for backstory in backstories:
        hero_id = backstory.get("id", backstory["name"].lower().replace(" ", "_"))
        
        # Format Markdown pour meilleure indexation
        content = f"""# {backstory['name']}

## Backstory
{backstory.get('backstory', '')}

## Personality
{backstory.get('personality', '')}

## Knowledge
{backstory.get('knowledge', '')}

## Additional Info
- Class: {backstory.get('class', 'Unknown')}
- Title: {backstory.get('title', '')}
- Quote: {backstory.get('quote', '')}
"""
        
        output_file = output_dir / f"{hero_id}_backstory.md"
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"üìù Saved: {output_file}")
    
    # Cr√©er aussi un fichier JSON consolid√©
    json_file = output_dir / "all_backstories.json"
    with open(json_file, 'w', encoding='utf-8') as f:
        json.dump(backstories, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ Total: {len(backstories)} backstories saved")
    print(f"üìÅ Location: {output_dir}")
    
    return output_dir

def main():
    print("üîç Extraction des backstories des h√©ros...")
    backstories = extract_hero_backstories()
    
    print(f"\nüìä Trouv√© {len(backstories)} backstories")
    
    print("\nüíæ Sauvegarde pour indexation...")
    output_dir = save_backstories_for_indexing(backstories)
    
    print("\nüöÄ Pour indexer dans la Vector DB:")
    print(f"python3 tools/vector_build/build_local.py --mode story --root {output_dir} --out vector-store/story")
    
    print("\n‚ú® Ou pour utiliser directement avec l'IA:")
    print("Le serveur Clippy Dev (port 8889) peut maintenant chercher dans ces fichiers!")

if __name__ == "__main__":
    main()
