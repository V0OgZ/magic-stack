/**
 * Tests E2E - Mode Game (Heroes of Time)
 */

import { test, expect } from '@playwright/test';

test.describe('Mode Game - Heroes of Time', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/game');
  });

  test('affiche l\'interface de jeu compl√®te', async ({ page }) => {
    // Header
    await expect(page.locator('text=‚öîÔ∏è Heroes of Time')).toBeVisible();
    
    // Navigation tabs
    await expect(page.locator('text=üó∫Ô∏è Carte')).toBeVisible();
    await expect(page.locator('text=‚öîÔ∏è Combat')).toBeVisible();
    await expect(page.locator('text=üìÖ Timeline')).toBeVisible();
    
    // Temporal display
    await expect(page.locator('text=TW')).toBeVisible();
    await expect(page.locator('text=TE')).toBeVisible();
    
    // Footer
    await expect(page.locator('text=‚è≠Ô∏è Fin de Tour')).toBeVisible();
    await expect(page.locator('text=Jour')).toBeVisible();
    await expect(page.locator('text=Tour')).toBeVisible();
  });

  test('affiche la barre de ressources', async ({ page }) => {
    // V√©rifier les 4 ressources principales
    const resourceBar = page.locator('.resource-bar').first();
    await expect(resourceBar).toBeVisible();
    
    // Les ic√¥nes doivent √™tre pr√©sentes
    await expect(page.locator('text=üíé')).toBeVisible(); // Crystals
    await expect(page.locator('text=‚ö°')).toBeVisible(); // Energy
    await expect(page.locator('text=‚è∞')).toBeVisible(); // Temporal
    await expect(page.locator('text=üåÄ')).toBeVisible(); // Quantum
  });

  test('navigation entre les vues', async ({ page }) => {
    // Vue Map par d√©faut
    const hexGrid = page.locator('.hex-grid-container');
    await expect(hexGrid).toBeVisible();
    
    // Aller √† Combat
    await page.click('text=‚öîÔ∏è Combat');
    await expect(page.locator('text=Mode Combat')).toBeVisible();
    await expect(page.locator('text=üé¥ Mode TCG')).toBeVisible();
    
    // Aller √† Timeline
    await page.click('text=üìÖ Timeline');
    await expect(page.locator('text=Timeline Temporelle')).toBeVisible();
    await expect(page.locator('text=Prochains √âv√©nements')).toBeVisible();
    
    // Retour √† Map
    await page.click('text=üó∫Ô∏è Carte');
    await expect(hexGrid).toBeVisible();
  });

  test('interaction avec la grille hexagonale', async ({ page }) => {
    // Attendre que la grille soit charg√©e
    const hexGrid = page.locator('.hex-grid-container');
    await expect(hexGrid).toBeVisible();
    
    // Cliquer sur un hexagone
    const firstHex = page.locator('.hex-cell').first();
    await firstHex.click();
    
    // V√©rifier la s√©lection (classe ou style)
    await expect(firstHex).toHaveClass(/hex-selected/);
  });

  test('bouton Fin de Tour', async ({ page }) => {
    // √âtat initial
    const dayText = page.locator('text=/Jour \\d+/');
    const initialDay = await dayText.textContent();
    
    // Cliquer sur Fin de Tour
    await page.click('text=‚è≠Ô∏è Fin de Tour');
    
    // V√©rifier que le tour a chang√©
    await page.waitForTimeout(100);
    const turnText = page.locator('text=/Tour \\d+/');
    await expect(turnText).toBeVisible();
  });

  test('temporal display mise √† jour', async ({ page }) => {
    // V√©rifier les valeurs temporelles
    const twValue = page.locator('text=TW').locator('..').locator('span').last();
    const teValue = page.locator('text=TE').locator('..').locator('span').last();
    
    await expect(twValue).toHaveText(/\d+\.\d/);
    await expect(teValue).toHaveText(/\d+\.\d/);
    
    // V√©rifier le drift
    const driftValue = page.locator('text=Œît').locator('..').locator('span').last();
    await expect(driftValue).toHaveText(/\d+\.\d/);
  });

  test('retour au menu principal', async ({ page }) => {
    await page.click('text=üè† Menu');
    await expect(page).toHaveURL('/');
    await expect(page.locator('text=Magic Stack Unified')).toBeVisible();
  });

  test('vue Combat - boutons TCG et Auto', async ({ page }) => {
    await page.click('text=‚öîÔ∏è Combat');
    
    // V√©rifier les boutons
    const tcgButton = page.locator('text=üé¥ Mode TCG');
    const autoButton = page.locator('text=‚ö° Auto-R√©solution');
    
    await expect(tcgButton).toBeVisible();
    await expect(autoButton).toBeVisible();
    
    // V√©rifier qu'ils sont cliquables
    await expect(tcgButton).toBeEnabled();
    await expect(autoButton).toBeEnabled();
  });

  test('vue Timeline - √©v√©nements jour 30', async ({ page }) => {
    await page.click('text=üìÖ Timeline');
    
    // V√©rifier la pr√©sence du jour 30
    await expect(page.locator('text=Jour 30')).toBeVisible();
    await expect(page.locator('text=üåü √âv√©nement Sp√©cial')).toBeVisible();
    
    // V√©rifier la liste des √©v√©nements
    await expect(page.locator('text=L\'Apocalypse Temporelle')).toBeVisible();
  });

  test('responsive - fonctionne sur tablette', async ({ page }) => {
    await page.setViewportSize({ width: 768, height: 1024 });
    
    // V√©rifier que l'interface s'adapte
    await expect(page.locator('text=‚öîÔ∏è Heroes of Time')).toBeVisible();
    await expect(page.locator('.hex-grid-container')).toBeVisible();
    
    // Les boutons doivent rester accessibles
    await expect(page.locator('text=‚è≠Ô∏è Fin de Tour')).toBeVisible();
  });
});
