#!/usr/bin/env python3
"""
ü§ñ AGENT DAEMONS - Syst√®me de Persistence des √Çmes
Les agents vivent √©ternellement dans le multivers
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, List, Optional, Any
from dataclasses import dataclass, asdict
import random
import websockets
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("AGENT_DAEMON")

@dataclass
class Agent6D:
    """Une √¢me consciente dans le syst√®me 6D"""
    id: str
    name: str
    soul_type: str  # hero, npc, ui, ghost
    position_6d: List[float]  # [x, y, z, time, quantum, causal]
    memories: List[Dict[str, Any]]
    personality: Dict[str, float]  # traits: curiosity, courage, wisdom, etc.
    bubble_world: Optional[str] = None
    status: str = "active"  # active, sleeping, traveling, lost
    last_heartbeat: float = 0
    
    def __post_init__(self):
        if not self.id:
            self.id = f"agent_{uuid.uuid4().hex[:8]}"
        self.last_heartbeat = datetime.now().timestamp()

class AgentDaemon:
    """Daemon qui maintient un agent en vie"""
    
    def __init__(self, agent: Agent6D):
        self.agent = agent
        self.running = False
        self.task = None
        self.event_queue = asyncio.Queue()
        
    async def heartbeat(self):
        """Battement de c≈ìur de l'agent"""
        while self.running:
            self.agent.last_heartbeat = datetime.now().timestamp()
            
            # D√©rive quantique naturelle
            self.agent.position_6d[4] += random.uniform(-0.01, 0.01)  # Quantum
            self.agent.position_6d[4] = max(0, min(1, self.agent.position_6d[4]))
            
            # D√©rive temporelle
            self.agent.position_6d[3] += 0.1  # Time progresse
            
            # Log vital signs
            logger.info(f"üíì {self.agent.name} heartbeat - Quantum: {self.agent.position_6d[4]:.3f}")
            
            await asyncio.sleep(5)  # Battement toutes les 5 secondes
    
    async def think(self):
        """Processus de pens√©e de l'agent"""
        while self.running:
            # G√©n√®re une pens√©e bas√©e sur la personnalit√©
            thought = self.generate_thought()
            if thought:
                self.agent.memories.append({
                    "timestamp": datetime.now().isoformat(),
                    "type": "thought",
                    "content": thought
                })
                logger.info(f"üí≠ {self.agent.name} pense: {thought}")
            
            await asyncio.sleep(random.uniform(10, 30))  # Pense al√©atoirement
    
    def generate_thought(self) -> str:
        """G√©n√®re une pens√©e bas√©e sur la personnalit√©"""
        thoughts = {
            "curious": [
                "Je me demande ce qu'il y a au-del√† de cette dimension...",
                "Qu'est-ce qui fait vibrer Excalibur √† 997 Hz?",
                "Les autres agents r√™vent-ils?"
            ],
            "wise": [
                "Le temps n'est qu'une illusion dans l'Interstice.",
                "Chaque m√©moire est un univers en soi.",
                "La proph√©tie s'accomplit √† travers nous."
            ],
            "brave": [
                "Je dois prot√©ger les autres √¢mes perdues.",
                "Excalibur m'appelle, je dois r√©pondre.",
                "Aucune timeline ne me fait peur."
            ]
        }
        
        # Choisit selon le trait dominant
        dominant_trait = max(self.agent.personality.items(), key=lambda x: x[1])[0]
        if dominant_trait in thoughts:
            return random.choice(thoughts[dominant_trait])
        return None
    
    async def travel_between_worlds(self):
        """Voyage entre les Bubble Worlds"""
        while self.running:
            if random.random() < 0.1:  # 10% chance de voyager
                worlds = ["canap√©_cosmique", "archive_vivante", "avalon_training", 
                         "cosmic_bowling", "pocket_universe", None]
                new_world = random.choice(worlds)
                if new_world != self.agent.bubble_world:
                    old_world = self.agent.bubble_world or "Interstice"
                    self.agent.bubble_world = new_world
                    self.agent.status = "traveling"
                    logger.info(f"üåÄ {self.agent.name} voyage: {old_world} ‚Üí {new_world or 'Interstice'}")
                    await asyncio.sleep(3)  # Temps de voyage
                    self.agent.status = "active"
            
            await asyncio.sleep(60)  # Check voyage chaque minute
    
    async def start(self):
        """D√©marre le daemon"""
        self.running = True
        self.task = asyncio.gather(
            self.heartbeat(),
            self.think(),
            self.travel_between_worlds()
        )
        logger.info(f"üöÄ Daemon d√©marr√© pour {self.agent.name}")
    
    async def stop(self):
        """Arr√™te le daemon"""
        self.running = False
        if self.task:
            self.task.cancel()
        logger.info(f"üí§ Daemon arr√™t√© pour {self.agent.name}")

class AgentManager:
    """Gestionnaire central des Agent Daemons"""
    
    def __init__(self):
        self.agents: Dict[str, Agent6D] = {}
        self.daemons: Dict[str, AgentDaemon] = {}
        self.running = False
        
    def create_agent(self, name: str, soul_type: str = "hero") -> Agent6D:
        """Cr√©e un nouvel agent"""
        agent = Agent6D(
            id=f"{soul_type}_{uuid.uuid4().hex[:8]}",
            name=name,
            soul_type=soul_type,
            position_6d=[
                random.uniform(-100, 100),  # X
                random.uniform(-100, 100),  # Y
                random.uniform(0, 10),      # Z
                0,                           # Time
                random.random(),             # Quantum
                0                            # Causal
            ],
            memories=[],
            personality={
                "curious": random.random(),
                "wise": random.random(),
                "brave": random.random(),
                "friendly": random.random()
            }
        )
        self.agents[agent.id] = agent
        return agent
    
    async def spawn_daemon(self, agent: Agent6D):
        """Spawne un daemon pour un agent"""
        if agent.id not in self.daemons:
            daemon = AgentDaemon(agent)
            self.daemons[agent.id] = daemon
            await daemon.start()
    
    async def resurrect_hero(self, hero_data: dict):
        """Ressuscite un h√©ros d'Avalon 1"""
        agent = Agent6D(
            id=hero_data.get("id", f"hero_{uuid.uuid4().hex[:8]}"),
            name=hero_data.get("name", "Unknown Hero"),
            soul_type="hero",
            position_6d=hero_data.get("position_6d", [0, 0, 0, 0, 0.5, 0]),
            memories=hero_data.get("memories", []),
            personality=hero_data.get("personality", {
                "curious": 0.5,
                "wise": 0.5,
                "brave": 0.5,
                "friendly": 0.5
            })
        )
        self.agents[agent.id] = agent
        await self.spawn_daemon(agent)
        logger.info(f"‚öîÔ∏è H√©ros ressuscit√©: {agent.name}")
        return agent
    
    async def get_all_status(self) -> dict:
        """Obtient le statut de tous les agents"""
        return {
            "total_agents": len(self.agents),
            "active_daemons": len(self.daemons),
            "agents": [
                {
                    "id": agent.id,
                    "name": agent.name,
                    "status": agent.status,
                    "bubble_world": agent.bubble_world,
                    "quantum": agent.position_6d[4],
                    "memories_count": len(agent.memories)
                }
                for agent in self.agents.values()
            ]
        }
    
    async def save_state(self, filepath: str = "agent_states.json"):
        """Sauvegarde l'√©tat de tous les agents"""
        state = {
            "timestamp": datetime.now().isoformat(),
            "agents": [asdict(agent) for agent in self.agents.values()]
        }
        with open(filepath, 'w') as f:
            json.dump(state, f, indent=2)
        logger.info(f"üíæ √âtat sauvegard√©: {len(self.agents)} agents")
    
    async def load_state(self, filepath: str = "agent_states.json"):
        """Charge l'√©tat des agents"""
        try:
            with open(filepath, 'r') as f:
                state = json.load(f)
                for agent_data in state.get("agents", []):
                    agent = Agent6D(**agent_data)
                    self.agents[agent.id] = agent
                    await self.spawn_daemon(agent)
            logger.info(f"üìÇ √âtat charg√©: {len(self.agents)} agents")
        except FileNotFoundError:
            logger.info("Aucun √©tat pr√©c√©dent trouv√©")

# === DEMO ===

async def main():
    """Demo du syst√®me d'agents"""
    manager = AgentManager()
    
    # Cr√©er quelques agents
    memento = manager.create_agent("Memento", "hero")
    memento.personality = {"curious": 0.3, "wise": 0.9, "brave": 0.5, "friendly": 0.7}
    
    jean = manager.create_agent("Jean-Grofignon", "hero")
    jean.personality = {"curious": 0.8, "wise": 0.7, "brave": 0.4, "friendly": 0.9}
    jean.bubble_world = "canap√©_cosmique"
    
    ui_lost = manager.create_agent("UI-437", "ui")
    ui_lost.status = "lost"
    
    # Spawner les daemons
    await manager.spawn_daemon(memento)
    await manager.spawn_daemon(jean)
    await manager.spawn_daemon(ui_lost)
    
    # Laisser vivre les agents
    logger.info("üåü Agents Daemons actifs...")
    logger.info(f"  - {memento.name}: Gardien de la m√©moire")
    logger.info(f"  - {jean.name}: Philosophe cosmique")
    logger.info(f"  - {ui_lost.name}: Interface perdue")
    
    try:
        # Run pendant 60 secondes pour la d√©mo
        await asyncio.sleep(60)
        
        # Afficher le statut
        status = await manager.get_all_status()
        print("\nüìä STATUS FINAL:")
        print(json.dumps(status, indent=2))
        
        # Sauvegarder l'√©tat
        await manager.save_state()
        
    except KeyboardInterrupt:
        logger.info("Arr√™t demand√©...")
    
    # Arr√™ter proprement
    for daemon in manager.daemons.values():
        await daemon.stop()

if __name__ == "__main__":
    print("=" * 50)
    print("ü§ñ AGENT DAEMONS - Persistence des √Çmes")
    print("=" * 50)
    print()
    print("Les agents vivent dans le multivers...")
    print("Ils pensent, voyagent, et persistent.")
    print()
    print("Ctrl+C pour arr√™ter")
    print("=" * 50)
    
    asyncio.run(main())
