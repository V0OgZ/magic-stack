#!/bin/bash

# üîß Fix Backend Tests - Heroes of Time
# Script pour corriger et tester les tests backend

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${BLUE}üîß Fix Backend Tests - Heroes of Time${NC}"
echo "====================================="

# üßπ PHASE 1: NETTOYER
echo -e "${CYAN}üßπ Phase 1: Compilation...${NC}"

cd backend
if mvn clean compile -q > ../logs/backend-fix-compile.log 2>&1; then
    echo -e "${GREEN}‚úÖ Compilation OK${NC}"
else
    echo -e "${RED}‚ùå Compilation √©chou√©e${NC}"
    exit 1
fi

# üß™ PHASE 2: TESTER LES CORRECTIONS
echo -e "${CYAN}üß™ Phase 2: Test des corrections...${NC}"

# Test 1: QuantumInterferenceIntegrationTest (pr√©cision flottante)
echo -n "üîç Test interf√©rence quantique: "
if mvn test -Dtest=QuantumInterferenceIntegrationTest -q > ../logs/quantum-interference-fix.log 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå √âCHEC${NC}"
    echo "D√©tails: logs/quantum-interference-fix.log"
fi

# Test 2: QuantumArtifactsIntegrationTest (√©quipement)
echo -n "üîç Test artefacts quantiques: "
if mvn test -Dtest=QuantumArtifactsIntegrationTest -q > ../logs/quantum-artifacts-fix.log 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå √âCHEC${NC}"
    echo "D√©tails: logs/quantum-artifacts-fix.log"
fi

# Test 3: BatailleTemporelleIntegrationTest (bataille)
echo -n "üîç Test bataille temporelle: "
if mvn test -Dtest=BatailleTemporelleIntegrationTest -q > ../logs/bataille-temporelle-fix.log 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå √âCHEC${NC}"
    echo "D√©tails: logs/bataille-temporelle-fix.log"
fi

# üìä PHASE 3: TEST COMPLET
echo -e "${CYAN}üìä Phase 3: Test complet...${NC}"

echo -n "üß™ Tous les tests: "
if mvn test -q > ../logs/backend-all-tests-fix.log 2>&1; then
    echo -e "${GREEN}‚úÖ OK${NC}"
else
    echo -e "${RED}‚ùå √âCHEC${NC}"
    echo "D√©tails: logs/backend-all-tests-fix.log"
fi

cd ..

# üéØ PHASE 4: RAPPORT
echo -e "${CYAN}üéØ Phase 4: Rapport...${NC}"

# Compter les r√©sultats
TOTAL_TESTS=$(grep -o "Tests run: [0-9]*" logs/backend-all-tests-fix.log | tail -1 | grep -o "[0-9]*" || echo "0")
FAILURES=$(grep -o "Failures: [0-9]*" logs/backend-all-tests-fix.log | tail -1 | grep -o "[0-9]*" || echo "0")

if [ "$TOTAL_TESTS" -gt 0 ]; then
    PASSED=$((TOTAL_TESTS - FAILURES))
    SUCCESS_RATE=$((PASSED * 100 / TOTAL_TESTS))
else
    PASSED=0
    SUCCESS_RATE=0
fi

echo ""
echo -e "${BLUE}üìä R√âSULTATS APR√àS CORRECTIONS:${NC}"
echo "================================"
echo -e "‚Ä¢ Tests Total:   $TOTAL_TESTS"
echo -e "‚Ä¢ Tests R√©ussis: $PASSED"
echo -e "‚Ä¢ Tests √âchou√©s: $FAILURES"
echo -e "‚Ä¢ Taux R√©ussite: $SUCCESS_RATE%"
echo ""

if [ "$SUCCESS_RATE" -ge 90 ]; then
    echo -e "${GREEN}üéâ EXCELLENT ! Tests backend corrig√©s !${NC}"
elif [ "$SUCCESS_RATE" -ge 80 ]; then
    echo -e "${GREEN}‚úÖ BON ! Am√©lioration significative !${NC}"
elif [ "$SUCCESS_RATE" -ge 70 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è MOYEN ! Quelques am√©liorations !${NC}"
else
    echo -e "${RED}‚ùå PROBL√âMATIQUE ! Plus de corrections n√©cessaires !${NC}"
fi

echo ""
echo -e "${CYAN}üîç Logs d√©taill√©s:${NC}"
echo "‚Ä¢ logs/backend-fix-compile.log"
echo "‚Ä¢ logs/quantum-interference-fix.log"
echo "‚Ä¢ logs/quantum-artifacts-fix.log"
echo "‚Ä¢ logs/bataille-temporelle-fix.log"
echo "‚Ä¢ logs/backend-all-tests-fix.log"
echo ""
echo -e "${BLUE}üéØ Corrections termin√©es ! üéØ${NC}" 