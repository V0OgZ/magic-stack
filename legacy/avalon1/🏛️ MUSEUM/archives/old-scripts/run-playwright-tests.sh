#!/bin/bash
set -e

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Variables
BACKEND_PID=""
FRONTEND_PID=""
BACKEND_LOG="logs/backend.log"
FRONTEND_LOG="logs/frontend.log"
TEST_MODE="headless"

# Fonction pour nettoyer les processus
cleanup() {
    echo -e "${YELLOW}üßπ Nettoyage des processus...${NC}"
    
    if [ ! -z "$BACKEND_PID" ]; then
        echo "Arr√™t du backend (PID: $BACKEND_PID)"
        kill -TERM $BACKEND_PID 2>/dev/null || kill -9 $BACKEND_PID 2>/dev/null || true
    fi
    
    if [ ! -z "$FRONTEND_PID" ]; then
        echo "Arr√™t du frontend (PID: $FRONTEND_PID)"
        kill -TERM $FRONTEND_PID 2>/dev/null || kill -9 $FRONTEND_PID 2>/dev/null || true
    fi
    
    # Nettoyer les processus restants
    pkill -f "spring-boot:run" 2>/dev/null || true
    pkill -f "npm start" 2>/dev/null || true
    pkill -f "node.*react-scripts" 2>/dev/null || true
    pkill -f "playwright" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
}

# Pi√®ge pour nettoyer lors de l'arr√™t du script
trap cleanup EXIT

# Fonction pour attendre qu'un service soit pr√™t
wait_for_service() {
    local url=$1
    local service_name=$2
    local max_attempts=45
    local attempt=0
    
    echo -e "${BLUE}‚è≥ Attente du d√©marrage de $service_name...${NC}"
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s $url > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ $service_name est pr√™t!${NC}"
            return 0
        fi
        
        sleep 2
        attempt=$((attempt + 1))
        echo -n "."
    done
    
    echo -e "${RED}‚ùå $service_name n'a pas d√©marr√© dans les temps${NC}"
    return 1
}

# Fonction pour d√©marrer le backend
start_backend() {
    echo -e "${BLUE}üöÄ D√©marrage du backend...${NC}"
    
    # V√©rifier si le port 8080 est libre
    if lsof -i:8080 > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è Port 8080 occup√©, arr√™t du processus...${NC}"
        lsof -ti:8080 | xargs kill -TERM 2>/dev/null || lsof -ti:8080 | xargs kill -9 2>/dev/null || true
        sleep 3
    fi
    
    cd backend
    
    # D√©marrer le backend en arri√®re-plan
    mvn spring-boot:run > ../$BACKEND_LOG 2>&1 &
    BACKEND_PID=$!
    
    cd ..
    
    # Attendre que le backend soit pr√™t
    wait_for_service "http://localhost:8080/actuator/health" "Backend"
}

# Fonction pour d√©marrer le frontend
start_frontend() {
    echo -e "${BLUE}üöÄ D√©marrage du frontend...${NC}"
    
    # V√©rifier si le port 3000 est libre
    if lsof -i:3000 > /dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è Port 3000 occup√©, arr√™t du processus...${NC}"
        lsof -ti:3000 | xargs kill -TERM 2>/dev/null || lsof -ti:3000 | xargs kill -9 2>/dev/null || true
        sleep 3
    fi
    
    cd frontend
    
    # D√©marrer le frontend en arri√®re-plan
    npm start > ../$FRONTEND_LOG 2>&1 &
    FRONTEND_PID=$!
    
    cd ..
    
    # Attendre que le frontend soit pr√™t
    wait_for_service "http://localhost:3000" "Frontend"
}

# Fonction pour lancer les tests Playwright
run_playwright_tests() {
    echo -e "${BLUE}üé≠ Lancement des tests Playwright...${NC}"
    
    cd frontend
    
    # Installer Playwright si n√©cessaire
    if [ ! -d "node_modules/@playwright" ]; then
        echo -e "${YELLOW}üì¶ Installation de Playwright...${NC}"
        npm install @playwright/test
        npx playwright install
    fi
    
    case $TEST_MODE in
        "headless")
            echo -e "${YELLOW}üéØ Tests en mode headless (pas de navigateur visible)...${NC}"
            npx playwright test --reporter=list
            ;;
        "headed")
            echo -e "${YELLOW}üéØ Tests avec navigateur visible (1 seul)...${NC}"
            npx playwright test --headed --workers=1 --reporter=list
            ;;
        "ui")
            echo -e "${YELLOW}üéØ Tests en mode UI automatique...${NC}"
            npx playwright test --ui --workers=1
            ;;
        "auto")
            echo -e "${YELLOW}üéØ Tests automatiques dans navigateur visible...${NC}"
            npx playwright test --headed --workers=1 --reporter=line
            ;;
        "single")
            echo -e "${YELLOW}üéØ Tests dans UN SEUL navigateur...${NC}"
            npx playwright test --headed --workers=1 --max-failures=1 --reporter=line
            ;;
        "demo")
            echo -e "${YELLOW}üé¨ D√âMO GAMEPLAY AUTOMATIQUE...${NC}"
            echo -e "${BLUE}   üéÆ Choisit un sc√©nario${NC}"
            echo -e "${BLUE}   ‚ñ∂Ô∏è Lance le jeu${NC}"
            echo -e "${BLUE}   ü¶∏ S√©lectionne un h√©ros${NC}"
            echo -e "${BLUE}   üó∫Ô∏è Fait un mouvement${NC}"
            echo -e "${BLUE}   ‚è≠Ô∏è Termine le tour${NC}"
            npx playwright test üß™ tests/e2e/gameplay-demo.spec.ts --headed --workers=1 --reporter=line
            ;;
        "multiplayer")
            echo -e "${YELLOW}üë• D√âMO MULTIJOUEUR - 2 √âCRANS...${NC}"
            echo -e "${BLUE}   üåê Cr√©er une session${NC}"
            echo -e "${BLUE}   ü§ù Joueur 2 rejoint${NC}"
            echo -e "${BLUE}   üéÆ Partie synchronis√©e${NC}"
            echo -e "${BLUE}   ‚öîÔ∏è Combat en temps r√©el${NC}"
            npx playwright test üß™ tests/e2e/multiplayer-demo.spec.ts --headed --workers=1 --reporter=line
            ;;
        "report")
            echo -e "${YELLOW}üéØ Tests avec rapport HTML...${NC}"
            npx playwright test --reporter=html
            echo -e "${GREEN}üìä Rapport HTML g√©n√©r√©! Ouvre: üåê frontend/playwright-report/index.html${NC}"
            ;;
        "verbose")
            echo -e "${YELLOW}üéØ Tests en mode verbose...${NC}"
            npx playwright test --reporter=line
            ;;
    esac
    
    cd ..
    
    echo -e "${GREEN}‚úÖ Tests Playwright termin√©s${NC}"
}

# Fonction principale
main() {
    echo -e "${BLUE}üé≠ === TESTS PLAYWRIGHT - HEROES OF TIME ===${NC}"
    echo -e "${BLUE}üéØ Mode: $TEST_MODE${NC}"
    
    # Cr√©er le r√©pertoire de logs
    mkdir -p logs
    
    # V√©rifier les pr√©requis
    if ! command -v npm &> /dev/null; then
        echo -e "${RED}‚ùå npm n'est pas install√©${NC}"
        exit 1
    fi
    
    if ! command -v mvn &> /dev/null; then
        echo -e "${RED}‚ùå Maven n'est pas install√©${NC}"
        exit 1
    fi
    
    # Installer les d√©pendances si n√©cessaire
    if [ -d "frontend" ] && [ ! -d "üåê frontend/node_modules" ]; then
        echo -e "${YELLOW}üì¶ Installation des d√©pendances frontend...${NC}"
        cd frontend && npm install && cd ..
    fi
    
    # D√©marrer les services
    start_backend
    start_frontend
    
    # Attendre un peu pour la stabilisation
    sleep 5
    
    # Lancer les tests
    echo -e "${BLUE}üéØ === D√âBUT DES TESTS ===${NC}"
    run_playwright_tests
    
    # R√©sum√©
    echo -e "${GREEN}üéâ === TESTS PLAYWRIGHT TERMIN√âS ===${NC}"
    echo -e "${GREEN}‚úÖ Mode utilis√©: $TEST_MODE${NC}"
    
    # Afficher les logs en cas d'erreur
    if [ -f "$BACKEND_LOG" ]; then
        echo -e "${YELLOW}üìã Logs backend: $BACKEND_LOG${NC}"
    fi
    
    if [ -f "$FRONTEND_LOG" ]; then
        echo -e "${YELLOW}üìã Logs frontend: $FRONTEND_LOG${NC}"
    fi
}

# Afficher l'aide
show_help() {
    echo -e "${BLUE}üé≠ Script de tests Playwright - Options d'affichage${NC}"
    echo ""
    echo "Usage:"
    echo "  ./run-playwright-tests.sh [MODE]"
    echo ""
    echo "Modes disponibles:"
    echo "  headless   - Tests sans navigateur visible (par d√©faut)"
    echo "  headed     - Tests avec 1 navigateur visible"
    echo "  auto       - Tests automatiques dans 1 navigateur visible"
    echo "  single     - Tests dans UN SEUL navigateur"
    echo "  demo       - D√©mo gameplay: choisit sc√©nario + joue 1 tour"
    echo "  multiplayer - D√©mo multijoueur: 2 √©crans c√¥te √† c√¥te"
    echo "  ui         - Interface graphique Playwright"
    echo "  report     - G√©n√®re un rapport HTML"
    echo "  verbose    - Affichage d√©taill√© dans le terminal"
    echo "  --help     - Afficher cette aide"
    echo ""
    echo "Exemples:"
    echo "  ./run-playwright-tests.sh headless  # Pas de navigateur"
    echo "  ./run-playwright-tests.sh headed    # 1 navigateur visible"
    echo "  ./run-playwright-tests.sh auto      # Tests automatiques visibles"
    echo "  ./run-playwright-tests.sh demo      # D√©mo gameplay automatique"
    echo "  ./run-playwright-tests.sh multiplayer # D√©mo 2 joueurs"
    echo "  ./run-playwright-tests.sh ui        # Interface graphique"
    echo "  ./run-playwright-tests.sh report    # Rapport HTML"
    echo "  ./run-playwright-tests.sh verbose   # D√©tails dans terminal"
}

# Traiter les arguments
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    show_help
    exit 0
fi

# D√©finir le mode de test
case "$1" in
    "headless"|"headed"|"auto"|"single"|"demo"|"multiplayer"|"ui"|"report"|"verbose")
        TEST_MODE="$1"
        ;;
    "")
        TEST_MODE="headless"
        ;;
    *)
        echo -e "${RED}‚ùå Mode inconnu: $1${NC}"
        show_help
        exit 1
        ;;
esac

# Ex√©cuter le script principal
main 