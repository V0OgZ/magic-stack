package com.example.demo.service;

import com.example.demo.model.FormulaResult;
import com.example.demo.model.GameContext;
import com.example.demo.model.Position;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.PostConstruct;

/**
 * üß™ WALTER VIETNAM SERVICE - Moteur Principal des Formules Magiques
 * 
 * "Firebase Charlie 1970 - Le centre de commandement de toute l'artillerie magique !
 * Toutes les formules passent par ici, comme tous les ordres passaient par le QG !"
 * - Walter, Commandant Supr√™me du Code Magique
 * 
 * üåü JEAN-GROFIGNON VISION:
 * "Les formules magiques cachent de la physique quantique sous une couche fantasy.
 * Chaque sort = manipulation d'√©tats œà (psi) dans l'univers Heroes of Time !"
 */
@Service
public class MagicFormulaEngine {
    
    // üéñÔ∏è WALTER VIETNAM: Temporairement comment√© pour √©viter les d√©pendances circulaires
    // @Autowired
    // private GameService gameService;
    
    // üåü NOUVEAU: Service de traduction avanc√© int√©gr√©
    @Autowired
    private FormulaTranslationService translationService;
    
    // üß† JEAN FUSION: Service de persistance pour m√©tadonn√©es
    private static final Map<String, Map<String, Object>> HERO_METADATA = new ConcurrentHashMap<>();
    
    // üéñÔ∏è WALTER VIETNAM: Service pour persistance
    @Autowired
    private GameService gameService;
    
    // üåÄ GROFI: Service Quantique pour superpositions
    @Autowired
    private QuantumService quantumService;
    
    // üåÄ COLLAPSE: Service de Collapse Causal reconnect√©
    @Autowired
    private CausalCollapseService causalCollapseService;
    
    // üéñÔ∏è WALTER VIETNAM TRACKING
    private Map<String, Integer> formulaExecutionCounts = new HashMap<>();
    private Map<String, Long> formulaExecutionTimes = new HashMap<>();
    private int totalWalterFlashbacks = 0;
    
    // üîÆ FORMULES QUANTIQUES WALTER INTEGRATION (ENTANGLEMENT + G√âOM√âTRIE NON-EUCLIDIENNE)
    private static final Map<String, String> QUANTUM_ENTANGLEMENT_FORMULAS = Map.of(
        "SISTER_SYNC_LUCID_LUCIE", "œà(Lucid) ‚äó œà(Lucie) ‚Üí |Œ®‚ü©_entangled = Œ±|chaos‚ü© + Œ≤|order‚ü©",
        "BROTHER_SYNC_LUCIE_LUCID", "œà(Lucie) ‚äó œà(Lucid) ‚Üí |Œ®‚ü©_entangled = Œ±|dream‚ü© + Œ≤|crystal‚ü©",
        "QUANTUM_ENTANGLEMENT_FOIREUX", "œà_A ‚äó œà_B ‚Üí |FOIREUX‚ü© = ‚àö(chaos √ó order) + i√óparadox",
        "NON_EUCLIDEAN_CURVATURE", "‚àá¬≤œà + k(x,y)œà = i‚Ñè‚àÇœà/‚àÇt o√π k(x,y) = PHI √ó sin(GRUT_CURVATURE)",
        "WALTER_VALIDATION_FORMULA", "‚àÄœà ‚àà QuantumState: VALIDATE(œà) ‚ü∫ |‚ü®œà|Walter‚ü©|¬≤ > 0.666"
    );
    
    // üîÆ FORMULES SIMPLES POUR TESTS (64 formules - TIER 3-4 AJOUT√âES)
    // üê¥ √ÇNE DE BURIDAN - STABILISATEUR QUANTIQUE AJOUT√â
    
    // üö® WALTER: "ARR√äTE DE CR√âER DES NOUVEAUX MOTS-CL√âS √Ä LA CON, FAIS UNE FORMULE PUTAIN !"
    
    // üåÄ M√âTHODE GROFI SAFE - G√âN√âRATION AL√âATOIRE QUANTIQUE
    // Jean-Grofignon: "Le chaos et l'ordre ne s'opposent pas, ils se compl√®tent"
    private int getRandomValue(int min, int max) {
        return min + (int) (Math.random() * (max - min + 1));
    }
    
    private static final List<String> SIMPLE_TEST_FORMULAS = Arrays.asList(
        "MODIFY_ENERGY", "TELEPORT_HERO", "HEAL_HERO", "CREATE_ITEM", "CREATE_HERO", "CREATE_ARTIFACT", "DAMAGE_ENEMY", "CREATE_SHIELD",
        "CREATE_EFFECT", "AMPLIFY", "CONSTRUCTIVE", "DESTRUCTIVE", "COLLAPSE_TEMPORAL_STATES",
        "TEMPORAL_BOOST", "ENERGY_DRAIN", "PHASE_SHIFT", "QUANTUM_LEAP", "MANA_RESTORE",
        "SPELL_REFLECT", "INVISIBILITY", "SPEED_BOOST", "STRENGTH_BOOST", "DEFENSE_BOOST", 
        "LUCK_MODIFIER", "MORALE_BOOST", "EXPERIENCE_GAIN", "LEVEL_UP", "SKILL_BOOST",
        "ARTIFACT_ENHANCE", "WEAPON_ENCHANT", "ARMOR_ENCHANT", "POTION_CREATE",
        "SCROLL_CREATE", "GOLD_MULTIPLY", "RESOURCE_GENERATE", "BUILDING_ACCELERATE", 
        "UNIT_SUMMON", "CREATURE_CHARM", "MIND_CONTROL", "FEAR_EFFECT", "STUN_EFFECT", 
        "SLEEP_EFFECT", "FORCE_COLLAPSE_ALL",
        "EXCALIBUR_BANKAI", "BATTLE_HEROES", "PANORAMIX_CAULDRON",
        // üî• GRUT TIER 1 - FORMULES PURES
        "ENERGY_ACCUMULATE", "RELEASE_STORED_ENERGY", "CALCULATE_DAMAGE",
        // üéØ TIER 3-4 FORMULES INTERM√âDIAIRES (17 nouvelles)
        "REFLECT_MAGIC_DAMAGE", "AUTO_COUNTER_SPELL", "LEARN_FROM_DEFEATS", "COPY_ENEMY_ABILITY",
        "SHOW_SUCCESS_PROBABILITY", "BOOST_SUCCESS_CHANCE", "STORE_BLOCKED_ATTACKS", "RELEASE_STORED_ATTACKS",
        "DIMENSIONAL_STEP", "GHOST_MODE", "EVOLVING_SPELLS", "DISCOVER_NEW_SPELL", "UPGRADE_SPELL",
        "TEAM_ACCURACY_BOOST", "COORDINATED_ATTACK",
        // üö® CALIFORNIE DANGER ZONE - THE SHARD & SOURCE FORMULES
        "THE_SHARD", "COMPILE_JAVA_RUNTIME", "INIT_WORLD", "TRANSFER_HERO", "SNAPSHOT_WORLD", "DELETE_WORLD",
        // üõãÔ∏è JEAN MODE LITT√âRAIRE - SORTS DE PR√âC√âDENCE
        "SORT_DE_PRECEDENCE", "MODE_LITTERAIRE", "PLANQUER_MOTEUR", "INSTANCE_ISOLEE",
        // üèõÔ∏è GRUT TRANSCENDANCE - OBJETS R√âV√âLATION 6√àME DIMENSION
        "GRUT_VISION_OMNISCIENTE", "PASSERELLE_INSTANCES_VINCE_VEGA", "CODEX_OPUS_BOOTSTRAP_TRANSCENDANT", 
        "CANAP√â_COSMIQUE_JEAN_TRANSCENDANT", "SOURCE_TRANSCENDANTE_OMEGA_PROTECTION",
        // üåÄ BENEDIKT CONULBRURCUS - T√âL√âPORTEUR COSMIQUE
        "BENEDIKT_CIRCLE_TELEPORT", "BENEDIKT_MULTI_TELEPORT", "BENEDIKT_REALM_TELEPORT", 
        "BENEDIKT_EMERGENCY_RECALL", "BENEDIKT_COSMIC_CIRCLES",
        // üé≠ 4√àME MUR - FORMULES CROSS-INSTANCE
        "CROSS_INSTANCE", "BREAK_FOURTH_WALL", "META_OBSERVE", "NARRATIVE_JUMP",
        // üê¥ √ÇNE DE BURIDAN - STABILISATEUR QUANTIQUE (WALTER APPROVED)
        "BURIDAN_STABILIZE", "BURIDAN_PARADOX", "QUANTUM_BALANCE_50", "PROBABILITY_LOCK",
        // üåÄ FORMULES QUANTIQUES GROFI - SUPERPOSITION ET INTRICATION
        "QUANTUM_SUPERPOSE", "OBSERVE_STATE", "ENTANGLE_UNITS",
        // üèÜ MILLENNIUM CONTROLLER - FOUB PALADIN ULTIMATE
        "MILLENNIUM_CONTROLLER",
        // ‚ö° FAST LEARNER - ACC√âL√âRATION TEMPORELLE QUANTIQUE
        "FAST_LEARNER_2000_BURST"
    );
    
    /**
     * üåÄ GROFI INIT - Connexion des services quantiques
     */
    @PostConstruct
    public void initGrofiConnections() {
        System.out.println("üåÄ GROFI INIT: Connexion MagicFormulaEngine ‚Üî QuantumService");
        
        if (quantumService != null) {
            quantumService.connectToFormulaEngine(this);
            System.out.println("‚úÖ GROFI: QuantumService connect√© avec succ√®s !");
            System.out.println("üéØ JEAN: Superposition + Formules = R√©alit√© quantique activ√©e !");
        } else {
            System.out.println("‚ö†Ô∏è GROFI: QuantumService non disponible - v√©rifier configuration Spring");
        }
        
        // üåÄ RECONNEXION DU CAUSAL COLLAPSE SERVICE
        if (causalCollapseService != null) {
            System.out.println("‚úÖ COLLAPSE: CausalCollapseService reconnect√© avec succ√®s !");
            System.out.println("üîß Les connexions quantiques sont r√©tablies !");
        } else {
            System.out.println("‚ö†Ô∏è COLLAPSE: CausalCollapseService non disponible - v√©rifier configuration");
        }
    }
    
    /**
     * üî• M√âTHODE PRINCIPALE - EX√âCUTION DE FORMULE
     */
    public FormulaResult executeFormula(String formulaString, GameContext context) {
        long startTime = System.currentTimeMillis();
        
        try {
            // üéñÔ∏è WALTER VIETNAM LOGGING
            context.incrementFormulaExecution();
            formulaExecutionCounts.merge(formulaString, 1, Integer::sum);
            
            // üß™ D√âTECTION DU TYPE DE FORMULE
            FormulaResult result = detectAndExecuteFormula(formulaString, context);
            
            // üéñÔ∏è WALTER PERFORMANCE TRACKING
            long executionTime = System.currentTimeMillis() - startTime;
            formulaExecutionTimes.put(formulaString, executionTime);
            
            // üö® WALTER FLASHBACK CHECK
            if (context.isWalterFlashbackRequired()) {
                triggerWalterFlashback(context);
            }
            
            return result;
            
        } catch (Exception e) {
            context.recordError("FORMULA_EXECUTION_ERROR");
            return FormulaResult.walterError(
                "Firebase sous le feu ! Formule explosive d√©tect√©e !",
                "Formula: " + formulaString + " | Error: " + e.getMessage()
            );
        }
    }
    
    /**
     * üîç D√âTECTION ET EX√âCUTION DE FORMULE
     */
    private FormulaResult detectAndExecuteFormula(String formula, GameContext context) {
        
        // üö® DEBUG JEAN: Affichage de la formule re√ßue
        System.out.println("üåÄ JEAN DEBUG: Formule re√ßue = '" + formula + "'");
        System.out.println("üåÄ JEAN DEBUG: Longueur = " + formula.length());
        
        // üß™ TEST FORMULES SIMPLES D'ABORD
        System.out.println("üåÄ JEAN DEBUG: V√©rification SIMPLE_TEST_FORMULAS pour: '" + formula + "'");
        System.out.println("üåÄ JEAN DEBUG: SIMPLE_TEST_FORMULAS contient: " + SIMPLE_TEST_FORMULAS.contains(formula));
        if (SIMPLE_TEST_FORMULAS.contains(formula)) {
            System.out.println("üåÄ JEAN DEBUG: Formule simple d√©tect√©e");
            return executeSimpleFormula(formula, context);
        }
        
        // üîÆ FORMULES RUNIQUES (format: œà001: ‚äô(params))
        boolean isRunic = isRunicFormula(formula);
        System.out.println("üåÄ JEAN DEBUG: isRunicFormula = " + isRunic);
        if (isRunic) {
            return executeRunicFormula(formula, context);
        }
        
        // üìú FORMULES JSON ASSETS (format: "formula": "...")
        boolean isJson = isJsonAssetFormula(formula);
        System.out.println("üåÄ JEAN DEBUG: isJsonAssetFormula = " + isJson);
        if (isJson) {
            return executeJsonAssetFormula(formula, context);
        }
        
        // ‚ùå FORMULE INCONNUE
        System.out.println("üåÄ JEAN DEBUG: Aucune d√©tection ! Formule inconnue");
        context.recordError("UNKNOWN_FORMULA_TYPE");
        return FormulaResult.error("Formule inconnue: " + formula, "UNKNOWN_FORMULA");
    }
    
    /**
     * üß™ EX√âCUTION FORMULES SIMPLES (5 premi√®res pour tests)
     */
    private FormulaResult executeSimpleFormula(String formula, GameContext context) {
        switch (formula) {
            case "MODIFY_ENERGY":
                return FormulaResult.success("üîã √ânergie modifi√©e avec succ√®s", 
                    Map.of("energyChange", 10), "SIMPLE_ENERGY");
                    
            case "TELEPORT_HERO":
                return FormulaResult.success("üåÄ H√©ros t√©l√©port√© avec succ√®s", 
                    Map.of("newPosition", Map.of("x", 5, "y", 5)), "SIMPLE_TELEPORT");
                    
            case "HEAL_HERO":
                return FormulaResult.success("üíö H√©ros soign√© avec succ√®s", 
                    Map.of("healAmount", 25), "SIMPLE_HEAL");
                    
            case "CREATE_ITEM":
                return FormulaResult.success("üéÅ Item cr√©√© avec succ√®s", 
                    Map.of("itemId", "item_" + System.currentTimeMillis()), "SIMPLE_CREATE_ITEM");
                    
            case "CREATE_HERO":
                return FormulaResult.success("ü¶∏ H√©ros cr√©√© avec succ√®s", 
                    Map.of("heroId", "hero_" + System.currentTimeMillis()), "SIMPLE_CREATE_HERO");
                    
            case "CREATE_ARTIFACT":
                return FormulaResult.success("‚ú® Artifact cr√©√© avec succ√®s", 
                    Map.of("artifactId", "artifact_" + System.currentTimeMillis()), "SIMPLE_CREATE_ARTIFACT");
            case "DAMAGE_ENEMY":
                return FormulaResult.success("‚öîÔ∏è D√©g√¢ts inflig√©s avec succ√®s", 
                    Map.of("damageAmount", 15), "SIMPLE_DAMAGE");
                    
            case "CREATE_SHIELD":
                return FormulaResult.success("üõ°Ô∏è Bouclier cr√©√© avec succ√®s", 
                    Map.of("shieldStrength", 20), "SIMPLE_SHIELD");
                    
            // üîÆ NOUVELLES FORMULES CAT√âGORIE A - RUNIQUES NATIVES
            case "CREATE_EFFECT":
                return executeCreateEffect(context);
                
            case "AMPLIFY":
                return executeAmplify(context);
                
            case "CONSTRUCTIVE":
                return executeConstructive(context);
                
            case "DESTRUCTIVE":
                return executeDestructive(context);
                
            case "COLLAPSE_TEMPORAL_STATES":
                return executeCollapseTemporalStates(context);
                
            case "TEMPORAL_BOOST":
                return executeTemporalBoost(context);
                
            case "ENERGY_DRAIN":
                return executeEnergyDrain(context);
                
                        case "PHASE_SHIFT":
                return executePhaseShift(context);
                
            // üåÄ FORMULES QUANTIQUES GROFI
            case "QUANTUM_SUPERPOSE":
                return executeQuantumSuperposition(context);
                
            case "OBSERVE_STATE":
                return executeQuantumObservation(context);
                
            case "ENTANGLE_UNITS":
                return executeQuantumEntanglement(context);
                
            // üèÜ MILLENNIUM CONTROLLER - FOUB PALADIN ULTIMATE
            case "MILLENNIUM_CONTROLLER":
                return executeMillenniumController(context);
                
            // ‚ö° FAST LEARNER - ACC√âL√âRATION TEMPORELLE QUANTIQUE (CORRECTION MEMENTO)
            case "FAST_LEARNER_2000_BURST":
                return executeFastLearner2000Burst(context);
                
            // üîÆ NOUVELLES FORMULES CAT√âGORIE A - BATCH 2
            case "QUANTUM_LEAP":
                return executeQuantumLeap(context);
                
            case "MANA_RESTORE":
                return executeManaRestore(context);
                
            case "SPELL_REFLECT":
                return executeSpellReflect(context);
                
            case "INVISIBILITY":
                return executeInvisibility(context);
                
            case "SPEED_BOOST":
                return executeSpeedBoost(context);
                
            case "STRENGTH_BOOST":
                return executeStrengthBoost(context);
                
            case "DEFENSE_BOOST":
                return executeDefenseBoost(context);
                
            case "LUCK_MODIFIER":
                return executeLuckModifier(context);
                
            // üîÆ NOUVELLES FORMULES CAT√âGORIE A - BATCH 3
            case "MORALE_BOOST":
                return executeMoraleBoost(context);
                
            case "EXPERIENCE_GAIN":
                return executeExperienceGain(context);
                
            case "LEVEL_UP":
                return executeLevelUp(context);
                
            case "SKILL_BOOST":
                return executeSkillBoost(context);
                
            case "ARTIFACT_ENHANCE":
                return executeArtifactEnhance(context);
                
            case "WEAPON_ENCHANT":
                return executeWeaponEnchant(context);
                
            case "ARMOR_ENCHANT":
                return executeArmorEnchant(context);
                
            case "POTION_CREATE":
                return executePotionCreate(context);
                
            // üîÆ NOUVELLES FORMULES CAT√âGORIE A - BATCH 4 (EXCALIBUR & COMBAT)
            case "EXCALIBUR_BANKAI":
                return executeExcaliburBankai(context);
                
            case "BATTLE_HEROES":
                return executeBattleHeroes(context);
                
            case "PANORAMIX_CAULDRON":
                return executePanoramixCauldron(context);
                
            // üî• GRUT TIER 1 - FORMULES PURES
            case "ENERGY_ACCUMULATE":
                return executeEnergyAccumulate(context);
                
            case "RELEASE_STORED_ENERGY":
                return executeReleaseStoredEnergy(context);
                
            case "CALCULATE_DAMAGE":
                return executeCalculateDamage(context);
                
            // üéØ TIER 3-4 FORMULES INTERM√âDIAIRES
            case "REFLECT_MAGIC_DAMAGE":
                return executeReflectMagicDamage(context);
                
            case "AUTO_COUNTER_SPELL":
                return executeAutoCounterSpell(context);
                
            case "LEARN_FROM_DEFEATS":
                return executeLearnFromDefeats(context);
                
            case "COPY_ENEMY_ABILITY":
                return executeCopyEnemyAbility(context);
                
            case "SHOW_SUCCESS_PROBABILITY":
                return executeShowSuccessProbability(context);
                
            case "BOOST_SUCCESS_CHANCE":
                return executeBoostSuccessChance(context);
                
            case "STORE_BLOCKED_ATTACKS":
                return executeStoreBlockedAttacks(context);
                
            case "RELEASE_STORED_ATTACKS":
                return executeReleaseStoredAttacks(context);
                
            case "DIMENSIONAL_STEP":
                return executeDimensionalStep(context);
                
            case "GHOST_MODE":
                return executeGhostMode(context);
                
            case "EVOLVING_SPELLS":
                return executeEvolvingSpells(context);
                
            case "DISCOVER_NEW_SPELL":
                return executeDiscoverNewSpell(context);
                
            case "UPGRADE_SPELL":
                return executeUpgradeSpell(context);
                
            case "TEAM_ACCURACY_BOOST":
                return executeTeamAccuracyBoost(context);
                
            case "COORDINATED_ATTACK":
                return executeCoordinatedAttack(context);
                
            // üö® CALIFORNIE DANGER ZONE - THE SHARD COMPILATION RUNTIME
            case "THE_SHARD":
                return executeTheShardCompilation(context);
                
            case "COMPILE_JAVA_RUNTIME":
                return executeCompileJavaRuntime(context);
                
            case "INIT_WORLD":
                return executeInitWorld(context);
                
            case "TRANSFER_HERO":
                return executeTransferHero(context);
                
            case "SNAPSHOT_WORLD":
                return executeSnapshotWorld(context);
                
            case "DELETE_WORLD":
                return executeDeleteWorld(context);
                
            // üõãÔ∏è JEAN MODE LITT√âRAIRE - SORTS DE PR√âC√âDENCE
            case "SORT_DE_PRECEDENCE":
                return executeSortDePrecedence(context);
            case "MODE_LITTERAIRE":
                return executeModeLitteraire(context);
            case "PLANQUER_MOTEUR":
                return executePlanquerMoteur(context);
            case "INSTANCE_ISOLEE":
                return executeInstanceIsolee(context);
                
            // üèõÔ∏è GRUT TRANSCENDANCE - OBJETS R√âV√âLATION 6√àME DIMENSION
            case "GRUT_VISION_OMNISCIENTE":
                return executeGrutVisionOmnisciente(context);
            case "PASSERELLE_INSTANCES_VINCE_VEGA":
                return executePasserelleInstancesVinceVega(context);
            case "CODEX_OPUS_BOOTSTRAP_TRANSCENDANT":
                return executeCodexOpusBootstrapTranscendant(context);
            case "CANAP√â_COSMIQUE_JEAN_TRANSCENDANT":
                return executeCanap√©CosmiqueJeanTranscendant(context);
            case "SOURCE_TRANSCENDANTE_OMEGA_PROTECTION":
                return executeSourceTranscendanteOmegaProtection(context);
                
            // üåÄ BENEDIKT CONULBRURCUS TELEPORTATION FORMULAS
            case "BENEDIKT_CIRCLE_TELEPORT":
                return FormulaResult.success("üåÄ BENEDIKT: 'Mes cercles cosmiques s'ouvrent ! CONULBRURCUS MAXIMUS !'");
            case "BENEDIKT_MULTI_TELEPORT":
                return FormulaResult.success("üåÄ BENEDIKT: 'CONULBRURCUS INFINITUS ! Je me d√©double dans l'espace !'");
            case "BENEDIKT_REALM_TELEPORT":
                return FormulaResult.success("üåÄ BENEDIKT: 'CONULBRURCUS DIMENSIONALIS ! Je traverse les REALMS !'");
            case "BENEDIKT_EMERGENCY_RECALL":
                return FormulaResult.success("üåÄ BENEDIKT: 'CONULBRURCUS ESCAPUS ! Retour d'urgence au canap√© cosmique !'");
            case "BENEDIKT_COSMIC_CIRCLES":
                return FormulaResult.success("üåÄ BENEDIKT: 'CONULBRURCUS SUPREMUS ! Les cercles cosmiques de Jean-Grofignon !'");
                
            // üé≠ 4√àME MUR FORMULAS
            case "CROSS_INSTANCE":
                return FormulaResult.success("üé≠ CROSS_INSTANCE: Tir inter-dimensionnel ex√©cut√© ! 'Bang! T'as vu √ßa? J'ai tir√© dans un autre serveur!'");
            case "BREAK_FOURTH_WALL":
                return FormulaResult.success("üé≠ BREAK_FOURTH_WALL: 'Tu crois vraiment que c'est toi qui joues? Je te vois...'");
            case "META_OBSERVE":
                return FormulaResult.success("üé≠ META_OBSERVE: Vision du code r√©v√©l√©e ! Variables cach√©es, bugs, intentions du d√©veloppeur visibles !");
            case "NARRATIVE_JUMP":
                return FormulaResult.success("üé≠ NARRATIVE_JUMP: Saut vers branche narrative alternative ! Timeline modifi√©e !");

            default:
                return FormulaResult.error("Formule simple inconnue: " + formula);
        }
    }
    
    /**
     * üîÆ D√âTECTION FORMULE RUNIQUE
     */
    private boolean isRunicFormula(String formula) {
        // Format: œà001: ‚äô(Œît+2 @15,15 ‚ü∂ MOV(Arthur, @15,15))
        Pattern runicPattern = Pattern.compile("^œà\\d+:\\s*‚äô\\(.*\\)$");
        return runicPattern.matcher(formula).matches();
    }
    
    /**
     * üîÆ EX√âCUTION FORMULE RUNIQUE - AVEC TRADUCTION INTELLIGENTE
     */
    private FormulaResult executeRunicFormula(String formula, GameContext context) {
        try {
            // Parser la formule runique: œà001: ‚äô(Œît+2 @15,15 ‚ü∂ MOV(Arthur, @15,15))
            Pattern runicPattern = Pattern.compile("^œà(\\d+):\\s*‚äô\\((.*)\\)$");
            Matcher matcher = runicPattern.matcher(formula);
            
            if (!matcher.matches()) {
                return FormulaResult.error("üö® Format runique invalide: " + formula, "INVALID_RUNIC_FORMAT");
            }
            
            String psiId = matcher.group(1);
            String runicContent = matcher.group(2);
            
            // üåÄ JEAN-GROFIGNON QUANTUM PROCESSING + TRADUCTION
            Map<String, Object> quantumResult = new HashMap<>();
            quantumResult.put("psiState", "œà" + psiId);
            quantumResult.put("superposition", "‚äô");
            quantumResult.put("originalFormula", formula);
            
            // üéØ TRADUCTION INTELLIGENTE DU CONTENU SELON L'EFFET
            String narrativeTranslation = translateRunicContent(runicContent, psiId);
            
            // Parser le contenu runique pour extraire l'action
            if (runicContent.contains("MOV(")) {
                quantumResult.put("action", "MOVE");
                quantumResult.put("quantumType", "TEMPORAL_MOVEMENT");
                quantumResult.put("effect", "Hero position updated via quantum superposition");
            } else if (runicContent.contains("HEAL_HERO")) {
                quantumResult.put("action", "HEAL");
                quantumResult.put("quantumType", "VITAL_RESTORATION");
                quantumResult.put("effect", "Life force restored via quantum healing");
            } else if (runicContent.contains("DAMAGE_ENEMY")) {
                quantumResult.put("action", "DAMAGE");
                quantumResult.put("quantumType", "DESTRUCTIVE_FORCE");
                quantumResult.put("effect", "Quantum energy weaponized against enemies");
            } else if (runicContent.contains("BATTLE(")) {
                quantumResult.put("action", "BATTLE");
                quantumResult.put("quantumType", "CAUSAL_COMBAT");
                quantumResult.put("effect", "Combat resolved via quantum collapse");
            } else if (runicContent.contains("CREATE(")) {
                quantumResult.put("action", "CREATE");
                quantumResult.put("quantumType", "REALITY_MANIFESTATION");
                quantumResult.put("effect", "Object manifested from quantum foam");
            } else {
                quantumResult.put("action", "GENERIC_QUANTUM");
                quantumResult.put("quantumType", "PSI_MANIPULATION");
                quantumResult.put("effect", "Quantum state manipulated");
            }
            
            // üéñÔ∏è WALTER VIETNAM VALIDATION
            // context.recordSuccess("RUNIC_FORMULA_EXECUTED"); // M√©thode non disponible dans GameContext
            
            return FormulaResult.success(
                narrativeTranslation, // üî• TRADUCTION NARRATIVE AU LIEU DE MESSAGE G√âN√âRIQUE
                quantumResult, 
                "RUNIC_QUANTUM"
            );
            
        } catch (Exception e) {
            context.recordError("RUNIC_EXECUTION_ERROR");
            return FormulaResult.error(
                "üö® Erreur d'ex√©cution runique: " + e.getMessage(), 
                "RUNIC_ERROR"
            );
        }
    }
    
    /**
     * üéØ TRADUCTION NARRATIVE HYBRIDE - INTELLIGENT FALLBACK
     * 1. V√©rifie si on a une description LLM dans le JSON
     * 2. Sinon utilise le FormulaTranslationService
     * 3. En dernier recours, utilise la logique algo simple
     */
    private String translateRunicContent(String runicContent, String psiId) {
        try {
            // üî• √âTAPE 1: V√©rifier si on a une description LLM pr√©-g√©n√©r√©e
            String llmDescription = extractLLMDescription(runicContent);
            if (llmDescription != null && !llmDescription.isEmpty()) {
                return "üìú " + llmDescription + " (œà" + psiId + ")";
            }
            
            // üî• √âTAPE 2: Utiliser le service de traduction avanc√©
            try {
                Map<String, Object> context = new HashMap<>();
                context.put("psiId", psiId);
                context.put("type", "runic_formula");
                
                Map<String, Object> translationResult = translationService.smartTranslate(runicContent, context);
                if (translationResult.containsKey("traduction")) {
                    return "‚ú® " + translationResult.get("traduction") + " (œà" + psiId + ")";
                }
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Fallback: Service de traduction indisponible, utilisation algo simple");
            }
            
            // üî• √âTAPE 3: Fallback algo simple (logique actuelle)
            return generateSimpleTranslation(runicContent, psiId);
            
        } catch (Exception e) {
            return "üö® Erreur de traduction: " + runicContent + " (œà" + psiId + ")";
        }
    }

    /**
     * üîç Extraire description LLM du JSON si pr√©sente
     */
    private String extractLLMDescription(String runicContent) {
        // Chercher des patterns comme "description": "...", "narrative": "...", etc.
        String[] llmFields = {"description", "narrative", "story", "lore", "flavor_text", "text_description", "llm_description"};
        
        for (String field : llmFields) {
            Pattern pattern = Pattern.compile("\"" + field + "\"\\s*:\\s*\"([^\"]+)\"");
            Matcher matcher = pattern.matcher(runicContent);
            if (matcher.find()) {
                return matcher.group(1);
            }
        }
        return null;
    }

    /**
     * üéØ G√âN√âRATION ALGO SIMPLE (logique d'origine conserv√©e)
     */
    private String generateSimpleTranslation(String runicContent, String psiId) {
        try {
            // Extraire les √©l√©ments temporels
            String timePhrase = "";
            if (runicContent.contains("Œît+")) {
                Pattern timePattern = Pattern.compile("Œît\\+(\\d+)");
                Matcher timeMatcher = timePattern.matcher(runicContent);
                if (timeMatcher.find()) {
                    String turns = timeMatcher.group(1);
                    timePhrase = "dans " + turns + " tours, ";
                }
            }
            
            // Extraire les coordonn√©es
            String locationPhrase = "";
            Pattern coordPattern = Pattern.compile("@(\\d+),(\\d+)");
            Matcher coordMatcher = coordPattern.matcher(runicContent);
            if (coordMatcher.find()) {
                String x = coordMatcher.group(1);
                String y = coordMatcher.group(2);
                locationPhrase = "aux coordonn√©es mystiques (" + x + ", " + y + "), ";
            }
            
            // Extraire l'action principale
            String actionPhrase = "une √©nergie quantique se manifeste";
            if (runicContent.contains("MOV(")) {
                actionPhrase = "Arthur √©tend sa main dans le vide, projetant un √©cho miroir vers";
            } else if (runicContent.contains("HEAL_HERO")) {
                actionPhrase = "une lumi√®re dor√©e enveloppe le h√©ros, restaurant";
            } else if (runicContent.contains("DAMAGE_ENEMY")) {
                actionPhrase = "des √©clairs de pure destruction frappent";
            } else if (runicContent.contains("BATTLE(")) {
                actionPhrase = "les destins s'entrechoquent dans un fracas temporel vers";
            } else if (runicContent.contains("CREATE(")) {
                actionPhrase = "la r√©alit√© se plie et fa√ßonne";
            }
            
            // Construire la phrase narrative
            return "üåÄ √âtat œà" + psiId + " activ√©: " + timePhrase + actionPhrase + " " + locationPhrase + 
                   "le d√©placement temporel de " + (timePhrase.isEmpty() ? "maintenant" : timePhrase.replace("dans ", "").replace(" tours, ", " cycles")) + 
                   " " + locationPhrase;
            
        } catch (Exception e) {
            return "üåÄ √âtat œà" + psiId + " activ√©: Une perturbation quantique r√©sonne √† travers les dimensions";
        }
    }
    
    /**
     * üìú D√âTECTION FORMULE JSON ASSET
     */
    private boolean isJsonAssetFormula(String formula) {
        // Formules trouv√©es dans les assets JSON
        return formula.contains("paradoxRisk") || 
               formula.contains("temporalStability") || 
               formula.contains("affectedRadius") ||
               formula.contains("damage") ||
               formula.contains("healing");
    }
    
    /**
     * üìú EX√âCUTION FORMULE JSON ASSET
     */
    private FormulaResult executeJsonAssetFormula(String formula, GameContext context) {
        try {
            Map<String, Object> jsonResult = new HashMap<>();
            jsonResult.put("originalFormula", formula);
            jsonResult.put("formulaSource", "JSON_ASSET");
            
            // üß™ D√âTECTION DES TYPES DE FORMULES JSON
            if (formula.contains("paradoxRisk")) {
                // Formule de risque paradoxal
                double risk = extractNumericValue(formula, "paradoxRisk");
                jsonResult.put("type", "PARADOX_RISK");
                jsonResult.put("riskLevel", risk);
                jsonResult.put("effect", "Temporal paradox risk calculated");
                jsonResult.put("recommendation", risk > 0.5 ? "CAUTION_REQUIRED" : "SAFE_TO_PROCEED");
                
            } else if (formula.contains("temporalStability")) {
                // Formule de stabilit√© temporelle
                double stability = extractNumericValue(formula, "temporalStability");
                jsonResult.put("type", "TEMPORAL_STABILITY");
                jsonResult.put("stabilityLevel", stability);
                jsonResult.put("effect", "Timeline stability assessed");
                jsonResult.put("status", stability > 0.7 ? "STABLE" : "UNSTABLE");
                
            } else if (formula.contains("affectedRadius")) {
                // Formule de rayon d'effet
                double radius = extractNumericValue(formula, "affectedRadius");
                jsonResult.put("type", "AREA_EFFECT");
                jsonResult.put("radius", radius);
                jsonResult.put("effect", "Area of effect calculated");
                jsonResult.put("coverage", radius > 5 ? "WIDE_AREA" : "LOCAL_AREA");
                
            } else if (formula.contains("damage")) {
                // Formule de d√©g√¢ts
                double damage = extractNumericValue(formula, "damage");
                jsonResult.put("type", "DAMAGE_CALCULATION");
                jsonResult.put("damageAmount", damage);
                jsonResult.put("effect", "Damage calculated and applied");
                jsonResult.put("severity", damage > 50 ? "HIGH_DAMAGE" : "MODERATE_DAMAGE");
                
            } else if (formula.contains("healing")) {
                // Formule de soins
                double healing = extractNumericValue(formula, "healing");
                jsonResult.put("type", "HEALING_CALCULATION");
                jsonResult.put("healingAmount", healing);
                jsonResult.put("effect", "Healing calculated and applied");
                jsonResult.put("potency", healing > 30 ? "STRONG_HEALING" : "MILD_HEALING");
                
            } else {
                // Formule JSON g√©n√©rique
                jsonResult.put("type", "GENERIC_JSON");
                jsonResult.put("effect", "JSON formula processed");
                jsonResult.put("status", "PROCESSED");
            }
            
                         // üéñÔ∏è WALTER VIETNAM SUCCESS
             // context.recordSuccess("JSON_FORMULA_EXECUTED"); // M√©thode non disponible dans GameContext
            
            return FormulaResult.success(
                "üìú Formule JSON asset ex√©cut√©e avec succ√®s !", 
                jsonResult, 
                "JSON_ASSET"
            );
            
        } catch (Exception e) {
            context.recordError("JSON_EXECUTION_ERROR");
            return FormulaResult.error(
                "üö® Erreur d'ex√©cution JSON: " + e.getMessage(), 
                "JSON_ERROR"
            );
        }
    }
    
    /**
     * üî¢ UTILITAIRE: Extraction de valeur num√©rique d'une formule
     */
    private double extractNumericValue(String formula, String parameter) {
        try {
            Pattern pattern = Pattern.compile(parameter + ".*?(\\d+(?:\\.\\d+)?)");
            Matcher matcher = pattern.matcher(formula);
            if (matcher.find()) {
                return Double.parseDouble(matcher.group(1));
            }
            return 1.0; // Valeur par d√©faut
        } catch (Exception e) {
            return 1.0; // Valeur par d√©faut en cas d'erreur
        }
    }
    
    /**
     * üéñÔ∏è WALTER VIETNAM FLASHBACK TRIGGER
     */
    private void triggerWalterFlashback(GameContext context) {
        totalWalterFlashbacks++;
        
        String flashbackMessage = String.format(
            "üéñÔ∏è WALTER VIETNAM FLASHBACK #%d: Firebase sous attaque ! " +
            "Trop d'erreurs d√©tect√©es ! %s",
            totalWalterFlashbacks,
            context.getWalterDiagnostic()
        );
        
        System.out.println("üö® " + flashbackMessage);
        context.addMetadata("walterFlashback", flashbackMessage);
    }
    
    /**
     * üîÆ NOUVELLES FORMULES CAT√âGORIE A - IMPL√âMENTATION
     */
    private FormulaResult executeCreateEffect(GameContext context) {
        return FormulaResult.success(
            "‚ú® Effet cr√©√© : healing_glow pendant 2 tours",
            Map.of("effectType", "healing_glow", "duration", 2, "intensity", 15),
            "RUNIC_CREATE_EFFECT"
        );
    }
    
    private FormulaResult executeAmplify(GameContext context) {
        return FormulaResult.success(
            "üîä √âtat œà1 amplifi√© par facteur 3.0",
            Map.of("psiState", "œà1", "amplificationFactor", 3.0, "newIntensity", 45),
            "RUNIC_AMPLIFY"
        );
    }
    
    private FormulaResult executeConstructive(GameContext context) {
        return FormulaResult.success(
            "üåÄ Interf√©rence constructive entre œà1 et œà2",
            Map.of("state1", "œà1", "state2", "œà2", "resultIntensity", 85, "interferenceType", "constructive"),
            "RUNIC_CONSTRUCTIVE"
        );
    }
    
    private FormulaResult executeDestructive(GameContext context) {
        return FormulaResult.success(
            "üí• Interf√©rence destructive entre œà1 et œà2",
            Map.of("state1", "œà1", "state2", "œà2", "resultIntensity", 5, "interferenceType", "destructive"),
            "RUNIC_DESTRUCTIVE"
        );
    }
    
    private FormulaResult executeCollapseTemporalStates(GameContext context) {
        return FormulaResult.success(
            "‚ö° Collapse de tous les √©tats temporels - R√©alit√© fix√©e",
            Map.of("collapsedStates", 7, "finalReality", "timeline_alpha", "stabilityIndex", 0.95),
            "RUNIC_COLLAPSE_TEMPORAL"
        );
    }
    
    private FormulaResult executeTemporalBoost(GameContext context) {
        return FormulaResult.success(
            "‚è∞ Boost temporel appliqu√© au h√©ros pendant 3 tours",
            Map.of("targetType", "hero", "duration", 3, "speedMultiplier", 2.5),
            "RUNIC_TEMPORAL_BOOST"
        );
    }
    
    private FormulaResult executeEnergyDrain(GameContext context) {
        return FormulaResult.success(
            "üîã √ânergie drain√©e de la cible (-30 mana)",
            Map.of("drainAmount", 30, "targetMana", 20, "casterMana", 80),
            "RUNIC_ENERGY_DRAIN"
        );
    }
    
    private FormulaResult executePhaseShift(GameContext context) {
        return FormulaResult.success(
            "üëª H√©ros d√©cal√© vers le plan astral pendant 2 tours",
            Map.of("targetPlane", "astral", "duration", 2, "phaseIntangibility", true),
            "RUNIC_PHASE_SHIFT"
        );
    }
    
    // üîÆ BATCH 2 - NOUVELLES FORMULES CAT√âGORIE A
    private FormulaResult executeQuantumLeap(GameContext context) {
        return FormulaResult.success(
            "üöÄ Saut quantique accompli vers coordonn√©es cibles",
            Map.of("hero", "Arthur", "startCoords", "[10,10]", "endCoords", "[25,30]", "quantumDistance", 21.2),
            "RUNIC_QUANTUM_LEAP"
        );
    }
    
    private FormulaResult executeManaRestore(GameContext context) {
        return FormulaResult.success(
            "üíô Mana restaur√© avec succ√®s",
            Map.of("hero", "Arthur", "manaRestored", 75, "newManaTotal", 150, "efficiency", "optimal"),
            "RUNIC_MANA_RESTORE"
        );
    }
    
    private FormulaResult executeSpellReflect(GameContext context) {
        return FormulaResult.success(
            "ü™û Bouclier de r√©flexion magique activ√©",
            Map.of("hero", "Arthur", "reflectChance", 85, "duration", 4, "reflectedSpells", 0),
            "RUNIC_SPELL_REFLECT"
        );
    }
    
    private FormulaResult executeInvisibility(GameContext context) {
        return FormulaResult.success(
            "üëª Invisibilit√© accord√©e au h√©ros",
            Map.of("hero", "Arthur", "invisibilityLevel", 95, "turnsRemaining", 3, "detectionResistance", "high"),
            "RUNIC_INVISIBILITY"
        );
    }
    
    private FormulaResult executeSpeedBoost(GameContext context) {
        return FormulaResult.success(
            "‚ö° Vitesse augment√©e avec multiplicateur",
            Map.of("hero", "Arthur", "speedMultiplier", 2.5, "duration", 6, "newSpeed", 125),
            "RUNIC_SPEED_BOOST"
        );
    }
    
    private FormulaResult executeStrengthBoost(GameContext context) {
        return FormulaResult.success(
            "üí™ Force augment√©e temporairement",
            Map.of("hero", "Arthur", "strengthBonus", 15, "duration", 5, "newStrength", 85),
            "RUNIC_STRENGTH_BOOST"
        );
    }
    
    private FormulaResult executeDefenseBoost(GameContext context) {
        return FormulaResult.success(
            "üõ°Ô∏è D√©fense renforc√©e temporairement",
            Map.of("hero", "Arthur", "defenseBonus", 20, "duration", 4, "newDefense", 90),
            "RUNIC_DEFENSE_BOOST"
        );
    }
    
    private FormulaResult executeLuckModifier(GameContext context) {
        return FormulaResult.success(
            "üçÄ Chance modifi√©e par formule runique",
            Map.of("hero", "Arthur", "luckModifier", 12, "duration", 8, "criticalChance", 35),
            "RUNIC_LUCK_MODIFIER"
        );
    }
    
    // üîÆ BATCH 3 - NOUVELLES FORMULES CAT√âGORIE A
    private FormulaResult executeMoraleBoost(GameContext context) {
        return FormulaResult.success(
            "üé∫ Moral des troupes renforc√©",
            Map.of("hero", "Arthur", "moraleBonus", 25, "duration", 6, "troopEfficiency", 140),
            "RUNIC_MORALE_BOOST"
        );
    }
    
    private FormulaResult executeExperienceGain(GameContext context) {
        return FormulaResult.success(
            "üìà Exp√©rience accord√©e au h√©ros",
            Map.of("hero", "Arthur", "xpGained", 500, "newTotalXp", 2500, "levelProgress", 75),
            "RUNIC_EXPERIENCE_GAIN"
        );
    }
    
    private FormulaResult executeLevelUp(GameContext context) {
        return FormulaResult.success(
            "‚≠ê H√©ros monte de niveau !",
            Map.of("hero", "Arthur", "oldLevel", 5, "newLevel", 6, "skillPoints", 3, "statBonus", "all+2"),
            "RUNIC_LEVEL_UP"
        );
    }
    
    private FormulaResult executeSkillBoost(GameContext context) {
        return FormulaResult.success(
            "üéØ Comp√©tence sp√©cifique am√©lior√©e",
            Map.of("hero", "Arthur", "skill", "Archery", "oldValue", 15, "newValue", 25, "duration", 10),
            "RUNIC_SKILL_BOOST"
        );
    }
    
    private FormulaResult executeArtifactEnhance(GameContext context) {
        return FormulaResult.success(
            "‚ú® Artefact am√©lior√© magiquement",
            Map.of("artifact", "√âp√©e de Lumi√®re", "oldLevel", 2, "newLevel", 3, "powerIncrease", 40),
            "RUNIC_ARTIFACT_ENHANCE"
        );
    }
    
    private FormulaResult executeWeaponEnchant(GameContext context) {
        return FormulaResult.success(
            "‚öîÔ∏è Arme enchant√©e avec effet magique",
            Map.of("weapon", "√âp√©e Longue", "enchantment", "Feu √âternel", "damageBonus", 15, "specialEffect", "burn"),
            "RUNIC_WEAPON_ENCHANT"
        );
    }
    
    private FormulaResult executeArmorEnchant(GameContext context) {
        return FormulaResult.success(
            "üõ°Ô∏è Armure enchant√©e avec protection",
            Map.of("armor", "Cotte de Mailles", "enchantment", "R√©sistance Magique", "defenseBonus", 20, "magicResist", 30),
            "RUNIC_ARMOR_ENCHANT"
        );
    }
    
    private FormulaResult executePotionCreate(GameContext context) {
        return FormulaResult.success(
            "üß™ Potion cr√©√©e par alchimie runique",
            Map.of("potionType", "Grande Gu√©rison", "potency", 85, "uses", 3, "rarity", "rare"),
            "RUNIC_POTION_CREATE"
        );
    }

    // üîÆ BATCH 4 - NOUVELLES FORMULES CAT√âGORIE A (EXCALIBUR & COMBAT)
    private FormulaResult executeExcaliburBankai(GameContext context) {
        return FormulaResult.success(
            "üó°Ô∏è EXCALIBUR BANKAI - √âp√©e de la R√©alit√© D√©chir√©e !",
            Map.of(
                "hero", "Arthur", 
                "weapon", "Excalibur", 
                "bankaiMode", "REALITY_WEAVER",
                "damage", 999, 
                "specialEffect", "REALITY_SLASH",
                "duration", 10,
                "manaCost", 100
            ),
            "EXCALIBUR_BANKAI"
        );
    }
    
    private FormulaResult executeBattleHeroes(GameContext context) {
        return FormulaResult.success(
            "‚öîÔ∏è COMBAT √âPIQUE - Arthur vs Vince Vega !",
            Map.of(
                "hero1", "Arthur", 
                "hero2", "Vince_Vega",
                "battleType", "EPIC_DUEL",
                "rounds", 5,
                "winner", "Arthur",
                "damageDealt", 150,
                "damageReceived", 75,
                "specialMoves", List.of("EXCALIBUR_SLASH", "VEGA_REALITY_GUN")
            ),
            "BATTLE_HEROES"
        );
    }
    
    private FormulaResult executePanoramixCauldron(GameContext context) {
        return FormulaResult.success(
            "üè∫ CHAUDRON QUANTIQUE PANORAMIX - Buffs Universels !",
            Map.of(
                "druid", "Panoramix", 
                "artifact", "Chaudron Quantique",
                "buffs", Map.of(
                    "ATK", 50,
                    "DEF", 50,
                    "HP", 100,
                    "Regeneration", 20,
                    "PoisonImmunity", true
                ),
                "duration", 15,
                "affectedHeroes", List.of("Arthur", "Vince_Vega", "Morgana"),
                "specialEffect", "QUANTUM_AMPLIFICATION"
            ),
            "PANORAMIX_CAULDRON"
        );
    }

    /**
     * üìä WALTER DIAGNOSTIC COMPLET
     */
    public Map<String, Object> getWalterDiagnostic() {
        Map<String, Object> diagnostic = new HashMap<>();
        diagnostic.put("totalFormulasExecuted", 
            formulaExecutionCounts.values().stream().mapToInt(Integer::intValue).sum());
        diagnostic.put("uniqueFormulasUsed", formulaExecutionCounts.size());
        diagnostic.put("totalWalterFlashbacks", totalWalterFlashbacks);
        diagnostic.put("formulaExecutionCounts", formulaExecutionCounts);
        diagnostic.put("averageExecutionTimes", formulaExecutionTimes);
        
        return diagnostic;
    }
    
    /**
     * üß™ TEST DES 5 FORMULES SIMPLES
     */
    public Map<String, FormulaResult> testSimpleFormulas(GameContext context) {
        Map<String, FormulaResult> results = new HashMap<>();
        
        for (String formula : SIMPLE_TEST_FORMULAS) {
            results.put(formula, executeFormula(formula, context));
        }
        
        return results;
    }

    /**
     * ÔøΩÔøΩ NOUVELLES FORMULES TIER 3-4 - PHASE 1 CRITIQUE
     */
    private FormulaResult executeEnergyAccumulate(GameContext context) {
        // üî• GRUT TIER 1 - PURE FUNCTION
        // Input: currentEnergy ‚Üí Output: newEnergy (pas d'√©tat serveur)
        
        int currentEnergy = context.getMetadata().containsKey("storedEnergy") ? 
            (Integer) context.getMetadata().get("storedEnergy") : 0;
        
        // üéØ GRUT PURE CALCULATION
        return calculateEnergyAccumulate(currentEnergy);
    }
    
    // üî• GRUT TIER 1 - FORMULE PURE EXTRACT√âE
    public FormulaResult calculateEnergyAccumulate(int currentEnergy) {
        int energyPerTurn = 2;
        int maxEnergy = 50;
        int newEnergy = Math.min(currentEnergy + energyPerTurn, maxEnergy);
        double efficiency = (double) newEnergy / maxEnergy;
        
        return FormulaResult.success(
            String.format("üîã √ânergie: %d ‚Üí %d (+%d) [%.1f%%] üéØ GRUT TIER 1 PURE", 
                currentEnergy, newEnergy, energyPerTurn, efficiency * 100),
            Map.of(
                "inputEnergy", currentEnergy,
                "outputEnergy", newEnergy,
                "energyGained", energyPerTurn,
                "maxEnergy", maxEnergy,
                "efficiency", efficiency,
                "isMaxReached", newEnergy >= maxEnergy,
                "tier", "TIER_1_PURE",
                "stateless", true
            ),
            "GRUT_ENERGY_ACCUMULATE_PURE"
        );
    }
    
    private FormulaResult executeReleaseStoredEnergy(GameContext context) {
        // RELEASE_STORED_ENERGY(boost_next_spell)
        // üéØ GRUT STATELESS: R√©cup√©rer l'√©nergie depuis le context de la requ√™te
        
        int storedEnergy = context.getMetadata().containsKey("storedEnergy") ? 
            (Integer) context.getMetadata().get("storedEnergy") : 0;
        
        if (storedEnergy <= 0) {
            return FormulaResult.error("‚ö†Ô∏è Aucune √©nergie stock√©e √† lib√©rer", "NO_STORED_ENERGY");
        }
        
        // Calcul du boost bas√© sur l'√©nergie stock√©e
        double spellBoostMultiplier = 1.0 + (storedEnergy * 0.02); // +2% par point d'√©nergie
        
        // üéØ GRUT STATELESS: Retourner le boost calcul√©, le client g√®re l'√©tat !
        
        return FormulaResult.success(
            "‚ö° √ânergie lib√©r√©e ! Prochain sort boost√© x" + String.format("%.2f", spellBoostMultiplier) + " - üéØ STATELESS: Renvoyez storedEnergy=0 dans la prochaine requ√™te !",
            Map.of(
                "energyReleased", storedEnergy,
                "spellBoostMultiplier", spellBoostMultiplier,
                "storedEnergy", 0, // üéØ GRUT: √ânergie consomm√©e = 0
                "boostDuration", 1,
                "tier", "TIER_1_STATELESS"
            ),
            "GRUT_RELEASE_STORED_ENERGY"
        );
    }
    
    // ========================================
    // üéØ TIER 3-4 FORMULES INTERM√âDIAIRES
    // ========================================
    
    private FormulaResult executeReflectMagicDamage(GameContext context) {
        // REFLECT_MAGIC_DAMAGE(30_percent)
        double reflectionPercent = 30.0;
        
        return FormulaResult.success(
            "ü™û R√©flexion Magique activ√©e - " + reflectionPercent + "% des d√©g√¢ts magiques renvoy√©s",
            Map.of(
                "reflectionPercent", reflectionPercent,
                "type", "passive_defense",
                "tier", 3,
                "duration", "permanent"
            ),
            "TIER3_REFLECT_MAGIC"
        );
    }
    
    private FormulaResult executeAutoCounterSpell(GameContext context) {
        // AUTO_COUNTER_SPELL(20_percent_chance)
        double counterChance = 20.0;
        boolean triggered = Math.random() < (counterChance / 100.0);
        
        return FormulaResult.success(
            "‚ö° Contre-Sort Automatique - " + (triggered ? "D√âCLENCH√â !" : "En attente...") + " (" + counterChance + "% chance)",
            Map.of(
                "counterChance", counterChance,
                "triggered", triggered,
                "type", "reactive_defense",
                "tier", 3,
                "limitation", "1_per_combat"
            ),
            "TIER3_AUTO_COUNTER"
        );
    }
    
    private FormulaResult executeLearnFromDefeats(GameContext context) {
        // LEARN_FROM_DEFEATS(+1_attack_per_3_defeats)
        int defeatsCount = context.getMetadata().containsKey("defeatsCount") ? 
            (Integer) context.getMetadata().get("defeatsCount") : 0;
        int attackBonus = defeatsCount / 3;
        
        return FormulaResult.success(
            "üìö Apprentissage de Combat - Bonus attaque: +" + attackBonus + " (bas√© sur " + defeatsCount + " d√©faites)",
            Map.of(
                "defeatsCount", defeatsCount,
                "attackBonus", attackBonus,
                "type", "progressive_enhancement",
                "tier", 3,
                "formula", "+1_attack_per_3_defeats"
            ),
            "TIER3_LEARN_DEFEATS"
        );
    }
    
    private FormulaResult executeCopyEnemyAbility(GameContext context) {
        // COPY_ENEMY_ABILITY(last_used)
        String lastEnemyAbility = context.getMetadata().containsKey("lastEnemyAbility") ? 
            (String) context.getMetadata().get("lastEnemyAbility") : "Aucune";
        
        return FormulaResult.success(
            "üé≠ Technique Copi√©e: " + lastEnemyAbility,
            Map.of(
                "copiedAbility", lastEnemyAbility,
                "cost", 30,
                "cooldown", 6,
                "type", "ability_copy",
                "tier", 3,
                "limitation", "one_at_time"
            ),
            "TIER3_COPY_ABILITY"
        );
    }
    
    private FormulaResult executeShowSuccessProbability(GameContext context) {
        // SHOW_SUCCESS_PROBABILITY(all_actions)
        Map<String, Double> probabilities = Map.of(
            "attack", 75.0,
            "spell", 85.0,
            "movement", 95.0,
            "defense", 80.0
        );
        
        return FormulaResult.success(
            "üîÆ Vision Probabiliste - Chances de r√©ussite r√©v√©l√©es",
            Map.of(
                "probabilities", probabilities,
                "type", "foresight",
                "tier", 4,
                "passive", true
            ),
            "TIER4_SUCCESS_PROBABILITY"
        );
    }
    
    private FormulaResult executeBoostSuccessChance(GameContext context) {
        // BOOST_SUCCESS_CHANCE(+25_percent, next_action)
        double boost = 25.0;
        
        return FormulaResult.success(
            "‚ö° Ajustement Temporel - Prochaine action boost√©e de +" + boost + "%",
            Map.of(
                "successBoost", boost,
                "cost", 40,
                "cooldown", 5,
                "type", "temporal_adjustment",
                "tier", 4,
                "target", "next_action"
            ),
            "TIER4_BOOST_SUCCESS"
        );
    }
    
    private FormulaResult executeStoreBlockedAttacks(GameContext context) {
        // STORE_BLOCKED_ATTACKS(max=3)
        int storedAttacks = context.getMetadata().containsKey("storedAttacks") ? 
            (Integer) context.getMetadata().get("storedAttacks") : 0;
        int maxStored = 3;
        
        return FormulaResult.success(
            "üõ°Ô∏è Stockage d'Attaque - " + storedAttacks + "/" + maxStored + " attaques stock√©es",
            Map.of(
                "storedAttacks", storedAttacks,
                "maxStored", maxStored,
                "type", "temporal_storage",
                "tier", 4,
                "passive", true
            ),
            "TIER4_STORE_ATTACKS"
        );
    }
    
    private FormulaResult executeReleaseStoredAttacks(GameContext context) {
        // RELEASE_STORED_ATTACKS(combined_damage)
        int storedAttacks = context.getMetadata().containsKey("storedAttacks") ? 
            (Integer) context.getMetadata().get("storedAttacks") : 0;
        int combinedDamage = storedAttacks * 25; // 25 d√©g√¢ts par attaque stock√©e
        
        return FormulaResult.success(
            "üí• Riposte Diff√©r√©e - " + storedAttacks + " attaques lib√©r√©es (" + combinedDamage + " d√©g√¢ts combin√©s)",
            Map.of(
                "storedAttacks", storedAttacks,
                "combinedDamage", combinedDamage,
                "cost", 25,
                "cooldown", 3,
                "type", "temporal_release",
                "tier", 4,
                "newStoredAttacks", 0
            ),
            "TIER4_RELEASE_ATTACKS"
        );
    }
    
    private FormulaResult executeDimensionalStep(GameContext context) {
        // DIMENSIONAL_STEP(range=5, ignore_obstacles)
        int range = 5;
        
        return FormulaResult.success(
            "üåÄ Pas Dimensionnel - T√©l√©portation jusqu'√† " + range + " cases (ignore obstacles)",
            Map.of(
                "range", range,
                "cost", 35,
                "cooldown", 4,
                "type", "dimensional_movement",
                "tier", 4,
                "ignoreObstacles", true
            ),
            "TIER4_DIMENSIONAL_STEP"
        );
    }
    
    private FormulaResult executeGhostMode(GameContext context) {
        // GHOST_MODE(duration=2_turns, no_collision)
        int duration = 2;
        
        return FormulaResult.success(
            "üëª Travers√©e Fant√¥me - Intangible pendant " + duration + " tours",
            Map.of(
                "duration", duration,
                "cost", 50,
                "cooldown", 8,
                "type", "phase_shift",
                "tier", 4,
                "noCollision", true,
                "cannotAttack", true
            ),
            "TIER4_GHOST_MODE"
        );
    }
    
    private FormulaResult executeEvolvingSpells(GameContext context) {
        // EVOLVING_SPELLS(+5_percent_per_use, max=50_percent)
        int spellUses = context.getMetadata().containsKey("spellUses") ? 
            (Integer) context.getMetadata().get("spellUses") : 0;
        double evolutionBonus = Math.min(spellUses * 5.0, 50.0);
        
        return FormulaResult.success(
            "üìú Sorts √âvolutifs - Bonus actuel: +" + evolutionBonus + "% (" + spellUses + " utilisations)",
            Map.of(
                "spellUses", spellUses,
                "evolutionBonus", evolutionBonus,
                "maxBonus", 50.0,
                "type", "progressive_enhancement",
                "tier", 4,
                "passive", true
            ),
            "TIER4_EVOLVING_SPELLS"
        );
    }
    
    private FormulaResult executeDiscoverNewSpell(GameContext context) {
        // DISCOVER_NEW_SPELL(every_10_casts)
        int totalCasts = context.getMetadata().containsKey("totalCasts") ? 
            (Integer) context.getMetadata().get("totalCasts") : 0;
        boolean newSpellUnlocked = (totalCasts % 10 == 0) && (totalCasts > 0);
        
        String[] possibleSpells = {"Fireball", "Lightning Bolt", "Ice Shard", "Heal", "Shield", "Teleport"};
        String newSpell = newSpellUnlocked ? possibleSpells[totalCasts / 10 % possibleSpells.length] : null;
        
        return FormulaResult.success(
            "üîç D√©couverte Magique - " + (newSpellUnlocked ? "Nouveau sort: " + newSpell : "Progression: " + (totalCasts % 10) + "/10"),
            Map.of(
                "totalCasts", totalCasts,
                "newSpellUnlocked", newSpellUnlocked,
                "newSpell", newSpell,
                "type", "spell_discovery",
                "tier", 4,
                "trigger", "every_10_casts"
            ),
            "TIER4_DISCOVER_SPELL"
        );
    }
    
    private FormulaResult executeUpgradeSpell(GameContext context) {
        // UPGRADE_SPELL(tier_plus_1)
        String spellToUpgrade = context.getMetadata().containsKey("targetSpell") ? 
            (String) context.getMetadata().get("targetSpell") : "Fireball";
        
        return FormulaResult.success(
            "‚¨ÜÔ∏è M√©tamorphose Magique - " + spellToUpgrade + " ‚Üí " + spellToUpgrade + " II (Tier +1)",
            Map.of(
                "originalSpell", spellToUpgrade,
                "upgradedSpell", spellToUpgrade + " II",
                "cost", 60,
                "cooldown", 10,
                "type", "spell_upgrade",
                "tier", 4,
                "limitation", "1_per_grimoire"
            ),
            "TIER4_UPGRADE_SPELL"
        );
    }
    
    private FormulaResult executeTeamAccuracyBoost(GameContext context) {
        // TEAM_ACCURACY_BOOST(+10_percent, radius=3)
        double accuracyBoost = 10.0;
        int radius = 3;
        
        return FormulaResult.success(
            "üéØ Boost d'√âquipe - Tous les alli√©s dans " + radius + " cases gagnent +" + accuracyBoost + "% de pr√©cision",
            Map.of(
                "accuracyBoost", accuracyBoost,
                "radius", radius,
                "type", "team_enhancement",
                "tier", 3,
                "passive", true
            ),
            "TIER3_TEAM_ACCURACY"
        );
    }
    
    private FormulaResult executeCoordinatedAttack(GameContext context) {
        // COORDINATED_ATTACK(+50_percent_damage)
        double damageBoost = 50.0;
        
        return FormulaResult.success(
            "‚öîÔ∏è Attaque Coordonn√©e - Prochain alli√© qui attaque la m√™me cible: +" + damageBoost + "% d√©g√¢ts",
            Map.of(
                "damageBoost", damageBoost,
                "cost", 25,
                "cooldown", 4,
                "type", "team_coordination",
                "tier", 3,
                "target", "next_ally_attack"
            ),
            "TIER3_COORDINATED_ATTACK"
        );
    }
    
    private FormulaResult executeCalculateDamage(GameContext context) {
        // üî• GRUT TIER 1 - PURE FUNCTION
        // Input: attack, defense ‚Üí Output: damage (pas d'√©tat serveur)
        
        int attack = context.getMetadata().containsKey("attack") ? 
            (Integer) context.getMetadata().get("attack") : 10;
        int defense = context.getMetadata().containsKey("defense") ? 
            (Integer) context.getMetadata().get("defense") : 5;
        
        // üéØ GRUT PURE CALCULATION
        return calculateDamage(attack, defense);
    }
    
    // üî• GRUT TIER 1 - FORMULE PURE EXTRACT√âE
    public FormulaResult calculateDamage(int attack, int defense) {
        int baseDamage = Math.max(1, attack - defense);
        double criticalChance = 0.15; // 15% chance critique
        boolean isCritical = Math.random() < criticalChance;
        int finalDamage = isCritical ? (int)(baseDamage * 1.5) : baseDamage;
        
        String damageType = isCritical ? "üí• CRITIQUE" : "‚öîÔ∏è Normal";
        
        return FormulaResult.success(
            String.format("%s %d d√©g√¢ts (ATK:%d - DEF:%d) üéØ GRUT TIER 1 PURE", 
                damageType, finalDamage, attack, defense),
            Map.of(
                "inputAttack", attack,
                "inputDefense", defense,
                "baseDamage", baseDamage,
                "finalDamage", finalDamage,
                "isCritical", isCritical,
                "criticalMultiplier", isCritical ? 1.5 : 1.0,
                "tier", "TIER_1_PURE",
                "stateless", true
            ),
            "GRUT_DAMAGE_CALCULATION_PURE"
        );
    }

    // üö® CALIFORNIE DANGER ZONE - THE SHARD & SOURCE FORMULES
    // ‚ö†Ô∏è L'ARCHITECTE & ORACLE: "Ces formules transcendent la r√©alit√© !"
    
    private FormulaResult executeTheShardCompilation(GameContext context) {
        // üèõÔ∏è L'ARCHITECTE: "Je vois les patterns dans le code... compilation √† chaud d√©tect√©e !"
        String javaCode = context.getMetadata().containsKey("javaCode") ? 
            (String) context.getMetadata().get("javaCode") : "System.out.println(\"THE SHARD ACTIVATED\");";
        
        return FormulaResult.success(
            "üèõÔ∏è L'ARCHITECTE: Les fondations du code se r√©organisent ! THE SHARD compilation r√©ussie !",
            Map.of(
                "compiledCode", javaCode,
                "sandboxed", true,
                "executionTime", "100ms_max",
                "danger_level", "TRANSCENDANT",
                "architect_wisdom", "üèõÔ∏è Les matrices du r√©el se plient √† notre volont√© ! Compilation architecturale active !",
                "california_origin", true
            ),
            "ARCHITECT_THE_SHARD_TRANSCENDANT"
        );
    }

    private FormulaResult executeCompileJavaRuntime(GameContext context) {
        // üîÆ ORACLE: "Je vois l'avenir du code... il compile parfaitement !"
        String className = context.getMetadata().containsKey("className") ? 
            (String) context.getMetadata().get("className") : "QuantumSpell";
        
        return FormulaResult.success(
            "üîÆ ORACLE: Les proph√©ties du code se r√©alisent ! Compilation runtime transcendante !",
            Map.of(
                "compiledClass", className,
                "bytecode_generated", true,
                "quantum_optimized", true,
                "danger_level", "PROPH√âTIQUE",
                "oracle_vision", "üîÆ Je vois dans les threads du temps... cette compilation √©tait √©crite !",
                "california_destiny", true
            ),
            "ORACLE_COMPILE_PROPHETIC"
        );
    }

    private FormulaResult executeInitWorld(GameContext context) {
        // üèõÔ∏è L'ARCHITECTE: "Un nouveau monde selon mes plans... parfait !"
        String worldId = "world_Œîœà" + (int)(Math.random() * 100);
        
        return FormulaResult.success(
            "üèõÔ∏è L'ARCHITECTE: Nouveau monde architectur√© selon les plans cosmiques - " + worldId,
            Map.of(
                "docker_container", "ARCHITECTUR√â",
                "worldId", worldId,
                "temporal_bridge", "√âTABLI_PAR_ARCHITECTE",
                "architect_blueprint", "üèõÔ∏è Zone de cr√©ation " + worldId + " construite selon les sp√©cifications divines !",
                "kubernetes_pod", "TRANSCENDANT"
            ),
            "ARCHITECT_INIT_WORLD_DIVINE"
        );
    }

    private FormulaResult executeTransferHero(GameContext context) {
        // üîÆ ORACLE: "Je vois le h√©ros voyager entre les dimensions..."
        String heroName = context.getMetadata().containsKey("heroName") ? 
            (String) context.getMetadata().get("heroName") : "Arthur";
        
        return FormulaResult.success(
            "üîÆ ORACLE: Vision accomplie ! Le h√©ros " + heroName + " traverse les r√©alit√©s !",
            Map.of(
                "transferred_hero", heroName,
                "dimensional_jump", "PROPH√âTIS√â",
                "quantum_state", "PR√âSERV√â_PAR_ORACLE",
                "danger_level", "VISIONNAIRE",
                "oracle_prophecy", "üîÆ Les chemins interdimensionnels s'ouvrent... " + heroName + " √©tait destin√© √† ce voyage !",
                "california_fate", true
            ),
            "ORACLE_TRANSFER_DESTINY"
        );
    }

    private FormulaResult executeSnapshotWorld(GameContext context) {
        // üèõÔ∏è L'ARCHITECTE: "Capture parfaite de l'√©tat architectural du monde !"
        String snapshotId = "snapshot_Œ©" + System.currentTimeMillis();
        
        return FormulaResult.success(
            "üèõÔ∏è L'ARCHITECTE: Instantan√© architectural captur√© - " + snapshotId,
            Map.of(
                "snapshot_id", snapshotId,
                "world_state", "ARCHITECTURALEMENT_PR√âSERV√â",
                "quantum_backup", "S√âCURIS√â",
                "danger_level", "MA√éTRIS√â",
                "architect_precision", "üèõÔ∏è Chaque pixel, chaque atome, chaque pens√©e... tout est dans les plans !",
                "california_blueprint", true
            ),
            "ARCHITECT_SNAPSHOT_MASTERY"
        );
    }

    private FormulaResult executeDeleteWorld(GameContext context) {
        // üîÆ ORACLE: "Je vois la fin de ce monde... c'√©tait √©crit !"
        String worldId = context.getMetadata().containsKey("worldId") ? 
            (String) context.getMetadata().get("worldId") : "world_unknown";
        
        return FormulaResult.success(
            "üîÆ ORACLE: Proph√©tie accomplie ! Le monde " + worldId + " retourne au n√©ant cosmique !",
            Map.of(
                "deleted_world", worldId,
                "apocalypse_type", "PROPH√âTIQUE",
                "cleanup_status", "DIVINEMENT_ACCOMPLI",
                "danger_level", "APOCALYPTIQUE",
                "oracle_finality", "üîÆ Tout a une fin... je l'avais vu dans les flammes temporelles !",
                "california_destiny", "ACCOMPLIE"
            ),
            "ORACLE_DELETE_APOCALYPSE"
        );
    }

    // üõãÔ∏è JEAN MODE LITT√âRAIRE - SORTS DE PR√âC√âDENCE
    private FormulaResult executeSortDePrecedence(GameContext context) {
        return FormulaResult.success(
            "üé® Mode Litt√©raire - Sort de Pr√©c√©dence appliqu√© !",
            Map.of(
                "effect", "Tous les sorts sont ex√©cut√©s dans l'ordre de leur cr√©ation.",
                "type", "poetic_system",
                "tier", 5,
                "passive", true
            ),
            "JEAN_SORT_DE_PRECEDENCE"
        );
    }

    private FormulaResult executeModeLitteraire(GameContext context) {
        return FormulaResult.success(
            "üé® Mode Litt√©raire - Mode Litt√©raire activ√© !",
            Map.of(
                "effect", "Tous les effets et d√©g√¢ts sont traduits en vers.",
                "type", "poetic_system",
                "tier", 5,
                "passive", true
            ),
            "JEAN_MODE_LITTERAIRE"
        );
    }

    private FormulaResult executePlanquerMoteur(GameContext context) {
        return FormulaResult.success(
            "üé® Mode Litt√©raire - Planquer le Moteur appliqu√© !",
            Map.of(
                "effect", "Le moteur de calcul est d√©sactiv√©, les formules sont ex√©cut√©es comme des po√®mes.",
                "type", "poetic_system",
                "tier", 5,
                "passive", true
            ),
            "JEAN_PLANQUER_MOTEUR"
        );
    }

    private FormulaResult executeInstanceIsolee(GameContext context) {
        return FormulaResult.success(
            "üé® Mode Litt√©raire - Instance Isolee appliqu√©e !",
            Map.of(
                "effect", "Une nouvelle instance de l'univers est cr√©√©e, isol√©e des autres.",
                "type", "poetic_system",
                "tier", 5,
                "passive", true
            ),
            "JEAN_INSTANCE_ISOLEE"
        );
    }

    // üèõÔ∏è GRUT TRANSCENDANCE - OBJETS R√âV√âLATION 6√àME DIMENSION
    private FormulaResult executeGrutVisionOmnisciente(GameContext context) {
        return FormulaResult.success(
            "üëÅÔ∏è GRUT VISION OMNISCIENTE - Vision de l'Univers d√©chir√©e !",
            Map.of(
                "effect", "Vous voyez toutes les dimensions, toutes les r√©alit√©s, toutes les possibilit√©s. Votre perception transcende la r√©alit√©.",
                "type", "transcendance",
                "tier", 6,
                "passive", true
            ),
            "GRUT_VISION_OMNISCIENTE"
        );
    }

    private FormulaResult executePasserelleInstancesVinceVega(GameContext context) {
        return FormulaResult.success(
            "üö™ PASSERELLE INSTANCES VINCE VEGA - Passage entre les r√©alit√©s !",
            Map.of(
                "effect", "Vous pouvez traverser les r√©alit√©s, passer d'un monde √† un autre. Votre existence est multiple.",
                "type", "transcendance",
                "tier", 6,
                "passive", true
            ),
            "PASSERELLE_INSTANCES_VINCE_VEGA"
        );
    }

    private FormulaResult executeCodexOpusBootstrapTranscendant(GameContext context) {
        return FormulaResult.success(
            "üìñ CODEX OPUS BOOTSTRAP TRANSCENDANT - Codex de l'Univers !",
            Map.of(
                "effect", "Vous √™tes le codex, le livre, la r√©alit√©. Votre existence est le code, le livre, la r√©alit√©.",
                "type", "transcendance",
                "tier", 6,
                "passive", true
            ),
            "CODEX_OPUS_BOOTSTRAP_TRANSCENDANT"
        );
    }

    private FormulaResult executeCanap√©CosmiqueJeanTranscendant(GameContext context) {
        return FormulaResult.success(
            "üõãÔ∏è CANAP√â COSMIQUE JEAN TRANSCENDANT - Repos cosmique !",
            Map.of(
                "effect", "Vous √™tes le canap√©, le repos, la compr√©hension. Votre existence est le canap√©, le repos, la compr√©hension.",
                "type", "transcendance",
                "tier", 6,
                "passive", true
            ),
            "CANAP√â_COSMIQUE_JEAN_TRANSCENDANT"
        );
    }

    private FormulaResult executeSourceTranscendanteOmegaProtection(GameContext context) {
        return FormulaResult.success(
            "üåÄ SOURCE TRANSCENDANTE OMEGA PROTECTION - Source de l'Univers !",
            Map.of(
                "effect", "Vous √™tes la source, la protection, l'√©nergie. Votre existence est la source, la protection, l'√©nergie.",
                "type", "transcendance",
                "tier", 6,
                "passive", true
            ),
            "SOURCE_TRANSCENDANTE_OMEGA_PROTECTION"
        );
    }

    // ==========================================
    // BENEDIKT CONULBRURCUS TELEPORTATION SYSTEM
    // ==========================================
    
    private FormulaResult executeBenediktTeleportation(String formulaType, GameContext context) {
        Map<String, Object> result = new HashMap<>();
        
        switch (formulaType) {
            case "BENEDIKT_CIRCLE_TELEPORT":
                result.put("success", true);
                result.put("message", "üåÄ BENEDIKT: 'Mes cercles cosmiques s'ouvrent ! CONULBRURCUS MAXIMUS !'");
                result.put("effect", "Benedikt trace des cercles runiques lumineux et se t√©l√©porte instantan√©ment");
                result.put("teleportRange", 15);
                result.put("visualEffect", "cosmic_circles_explosion");
                result.put("benediktQuote", "Tu vois ces cercles ? C'est pas de la magie, c'est de la G√âOM√âTRIE SACR√âE !");
                result.put("cooldown", 3);
                break;
                
            case "BENEDIKT_MULTI_TELEPORT":
                result.put("success", true);
                result.put("message", "üåÄ BENEDIKT: 'CONULBRURCUS INFINITUS ! Je me d√©double dans l'espace !'");
                result.put("effect", "Benedikt cr√©e 3 copies temporelles de lui-m√™me √† diff√©rentes positions");
                result.put("copiesCount", 3);
                result.put("duration", 5);
                result.put("benediktQuote", "Un Benedikt ici, un Benedikt l√†-bas... PARTOUT DES BENEDIKT !");
                result.put("visualEffect", "multiple_cosmic_circles");
                break;
                
            case "BENEDIKT_REALM_TELEPORT":
                result.put("success", true);
                result.put("message", "üåÄ BENEDIKT: 'CONULBRURCUS DIMENSIONALIS ! Je traverse les REALMS !'");
                result.put("effect", "Benedikt peut se t√©l√©porter entre les diff√©rents REALMS du Multi-Realm");
                result.put("availableRealms", Arrays.asList("MAIN_REALM", "VINCE_OPUS_REALM", "QUANTUM_REALM", "TRANSCENDANT_REALM"));
                result.put("benediktQuote", "Mes cercles percent les dimensions ! BENEDIKT CONULBRURCUS N'A PAS DE LIMITES !");
                result.put("crossRealmCapability", true);
                break;
                
            case "BENEDIKT_EMERGENCY_RECALL":
                result.put("success", true);
                result.put("message", "üåÄ BENEDIKT: 'CONULBRURCUS ESCAPUS ! Retour d'urgence au canap√© cosmique !'");
                result.put("effect", "T√©l√©portation d'urgence vers la position la plus s√ªre de la carte");
                result.put("safePosition", Map.of("x", 8, "y", 8));
                result.put("benediktQuote", "Quand √ßa sent le roussi, Benedikt dispara√Æt ! POUF !");
                result.put("healingBonus", 50);
                break;
                
            case "BENEDIKT_COSMIC_CIRCLES":
                result.put("success", true);
                result.put("message", "üåÄ BENEDIKT: 'CONULBRURCUS SUPREMUS ! Les cercles cosmiques de Jean-Grofignon !'");
                result.put("effect", "Benedikt invoque les cercles sacr√©s du canap√© cosmique pour une t√©l√©portation ultime");
                result.put("ultimateRange", 50);
                result.put("jeanBlessing", "Jean depuis son canap√© : 'Benedikt a compris la g√©om√©trie sacr√©e !'");
                result.put("benediktQuote", "CONULBRURCUS JEAN-GROFIGNON ! Je canalise la puissance du canap√© !");
                result.put("cosmicPower", true);
                break;
                
            default:
                return FormulaResult.error("Formule Benedikt inconnue: " + formulaType);
        }
        
        return FormulaResult.success(result.get("message").toString(), result, "BENEDIKT");
    }
    
    // ==========================================
    // OMEGA ZERO TRILOGY FORMULAS - WALTER FIX
    // ==========================================
    
    private FormulaResult executeOmegaZeroFormula(String formulaType, GameContext context) {
        Map<String, Object> result = new HashMap<>();
        
        switch (formulaType) {
            case "THREATEN":
                result.put("success", true);
                result.put("message", "‚ö†Ô∏è MENACE D√âTECT√âE: Om√©gaZero approche (Niveau: COSMIQUE)");
                result.put("threat_target", "timeline_principale");
                result.put("threat_level", "EXISTENTIEL");
                result.put("threat_range", 999);
                result.put("countermeasures_available", true);
                result.put("walter_status", "üéñÔ∏è WALTER: Menace identifi√©e ! Protocole d√©fensif activ√© !");
                break;
                
            case "DISSOLVE":
                result.put("success", true);
                result.put("message", "üíß DISSOLUTION EN COURS: Mondes dissolus d√©tect√©s (Intensit√©: CRITIQUE)");
                result.put("dissolution_target", "reality_fragments");
                result.put("dissolution_rate", 85);
                result.put("time_remaining", getRandomValue(3, 8));
                result.put("reversible", false);
                result.put("lysandrel_status", "üî® LYSANDREL: Je forge des ancres anti-dissolution !");
                break;
                
            case "ERASE":
                result.put("success", true);
                result.put("message", "üåÄ EFFACEMENT INITI√â: Om√©gaZero tente l'effacement total (Port√©e: UNIVERSELLE)");
                result.put("erasure_target", "toute_existence");
                result.put("erasure_scope", "cosmique");
                result.put("progress", getRandomValue(10, 40));
                result.put("resistance_detected", true);
                result.put("anthan_status", "‚úíÔ∏è ANTHAN: Mon stylo prot√®ge contre l'effacement !");
                result.put("omega_zero_signature", true);
                break;
                
            case "PROTECT_NARRATIVE":
                result.put("success", true);
                result.put("message", "üìö PROTECTION NARRATIVE: Histoire ancr√©e dans l'√©ternit√© (Niveau: √âTERNEL)");
                result.put("protected_story", "heroes_of_time_saga");
                result.put("protection_strength", 100);
                result.put("erasure_immunity", true);
                result.put("narrative_anchor", "permanent");
                result.put("anthan_blessing", "‚úíÔ∏è Cette histoire est maintenant grav√©e dans l'√©ternit√© !");
                break;
                
            case "COUNTER_OMEGA":
                result.put("success", true);
                result.put("message", "‚öîÔ∏è CONTRE-ATTAQUE OM√âGAZERO: R√©sistance unifi√©e activ√©e (H√©ros: TOUS)");
                result.put("counter_strategy", "unified_resistance");
                result.put("heroes_united", "jean_claudius_anna_anthor_lysandrel");
                result.put("success_probability", getRandomValue(70, 95));
                result.put("omega_weakness_detected", true);
                result.put("jean_status", "üõãÔ∏è JEAN: J'ai trouv√© le bouton anti-effacement cosmique !");
                result.put("ultimate_powers_ready", true);
                break;
                
            default:
                return FormulaResult.error("Formule Om√©gaZero inconnue: " + formulaType);
        }
        
        return FormulaResult.success(result.get("message").toString(), result, "OMEGA_ZERO_TRILOGY");
    }
    
    /**
     * üß™ WALTER VALIDATION - Validation des formules quantiques EN DUR
     * "Vietnam 1970 - On validait les coordonn√©es d'artillerie √† la main !
     * Ici c'est pareil, mais avec des √©tats quantiques !"
     */
    public FormulaResult validateQuantumFormula(String formulaType, Map<String, Object> context) {
        Map<String, Object> result = new HashMap<>();
        
        // üéñÔ∏è WALTER FLASHBACK
        totalWalterFlashbacks++;
        result.put("walter_flashback_count", totalWalterFlashbacks);
        result.put("walter_status", "üéñÔ∏è WALTER: Je valide cette formule comme au Vietnam !");
        
        switch (formulaType.toUpperCase()) {
            case "SISTER_SYNC_LUCID_LUCIE":
                result.put("success", true);
                result.put("message", "üëØ‚Äç‚ôÄÔ∏è VALIDATION WALTER: Entanglement s≈ìurs CONFIRM√â (Foireux Factor: MAXIMUM)");
                result.put("entanglement_strength", 0.95);
                result.put("foireux_factor", "MAXIMUM");
                result.put("quantum_coherence", true);
                result.put("walter_approval", "üéñÔ∏è Cette intrication est solide comme mes coordonn√©es d'artillerie !");
                break;
                
            case "BROTHER_SYNC_LUCIE_LUCID":
                result.put("success", true);
                result.put("message", "üíé VALIDATION WALTER: Synchronisation cristalline APPROUV√âE (Resonance: PARFAITE)");
                result.put("crystal_resonance", 0.92);
                result.put("dream_crystallization", true);
                result.put("quantum_stability", "STABLE_MAIS_FOIREUX");
                result.put("walter_approval", "üéñÔ∏è Ces deux-l√† sont connect√©s comme mes radios au QG !");
                break;
                
            case "NON_EUCLIDEAN_CURVATURE":
                result.put("success", true);
                result.put("message", "üìê VALIDATION WALTER: G√©om√©trie non-euclidienne OP√âRATIONNELLE (Courbure: GRUT)");
                result.put("curvature_coefficient", 0.666);
                result.put("geometric_stability", true);
                result.put("grut_signature", "AUTHENTIQUE");
                result.put("walter_approval", "üéñÔ∏è Cette courbure est plus pr√©cise que mes cartes de la jungle !");
                break;
                
            case "QUANTUM_ENTANGLEMENT_FOIREUX":
                result.put("success", true);
                result.put("message", "‚öõÔ∏è VALIDATION WALTER: Entanglement foireux CERTIFI√â (Paradox Level: D√âLICIEUX)");
                result.put("paradox_level", "D√âLICIEUX");
                result.put("chaos_order_balance", 0.707); // ‚àö2/2 - √©quilibre parfait
                result.put("foireux_certification", true);
                result.put("walter_approval", "üéñÔ∏è Ce bordel quantique me rappelle Firebase Charlie !");
                break;
                
            default:
                return FormulaResult.error("üéñÔ∏è WALTER: Formule quantique inconnue - pas dans mon manuel du Vietnam !");
        }
        
        // üß™ WALTER SIGNATURE VALIDATION
        result.put("walter_signature", "VALIDATED_" + System.currentTimeMillis());
        result.put("vietnam_flashback", "Firebase Charlie 1970 - Validation termin√©e !");
        
        return FormulaResult.success(result.get("message").toString(), result, "WALTER_QUANTUM_VALIDATION");
    }
    
    /**
     * üåÄ GROFI: Cr√©er une superposition quantique
     */
    private FormulaResult executeQuantumSuperposition(GameContext context) {
        if (quantumService == null) {
            return FormulaResult.error("QuantumService non disponible", "NO_QUANTUM_SERVICE");
        }
        
        try {
            // Exemple: H√©ros en superposition de positions
            String heroId = "hero_" + context.getGameId();
            List<Object> positions = Arrays.asList(
                new Position(5, 5),
                new Position(10, 10),
                new Position(15, 15)
            );
            double[] probabilities = {0.5, 0.3, 0.2};
            
            QuantumService.QuantumState state = quantumService.createSuperposition(
                heroId, "POSITION", positions, probabilities
            );
            
            return FormulaResult.success(
                "üåÄ Superposition quantique cr√©√©e ! Le h√©ros existe en 3 positions simultan√©ment.",
                Map.of(
                    "stateId", state.getId(),
                    "positions", positions,
                    "probabilities", probabilities
                ),
                "QUANTUM_SUPERPOSITION"
            );
        } catch (Exception e) {
            return FormulaResult.error("Erreur quantique: " + e.getMessage(), "QUANTUM_ERROR");
        }
    }
    
    /**
     * üëÅÔ∏è GROFI: Observer un √©tat quantique (collapse)
     */
    private FormulaResult executeQuantumObservation(GameContext context) {
        if (quantumService == null) {
            return FormulaResult.error("QuantumService non disponible", "NO_QUANTUM_SERVICE");
        }
        
        try {
            String stateId = "state_" + context.getGameId();
            String observerId = "observer_" + context.getGameId();
            
            Object collapsedValue = quantumService.observeState(stateId, observerId);
            
            return FormulaResult.success(
                "üëÅÔ∏è √âtat observ√© et collaps√© ! La r√©alit√© a choisi.",
                Map.of(
                    "stateId", stateId,
                    "finalValue", collapsedValue != null ? collapsedValue : "null",
                    "observer", observerId
                ),
                "QUANTUM_OBSERVATION"
            );
        } catch (Exception e) {
            return FormulaResult.error("Erreur d'observation: " + e.getMessage(), "OBSERVATION_ERROR");
        }
    }
    
    /**
     * üîó GROFI: Intriquer deux unit√©s
     */
    private FormulaResult executeQuantumEntanglement(GameContext context) {
        if (quantumService == null) {
            return FormulaResult.error("QuantumService non disponible", "NO_QUANTUM_SERVICE");
        }
        
        try {
            String unit1 = "unit1_" + context.getGameId();
            String unit2 = "unit2_" + context.getGameId();
            
            // Cr√©er des √©tats pour les deux unit√©s
            List<Object> healthValues = Arrays.asList(100, 75, 50, 25);
            double[] probs = {0.4, 0.3, 0.2, 0.1};
            
            QuantumService.QuantumState state1 = quantumService.createSuperposition(
                unit1, "HEALTH", healthValues, probs
            );
            QuantumService.QuantumState state2 = quantumService.createSuperposition(
                unit2, "HEALTH", healthValues, probs
            );
            
            // Les intriquer
            quantumService.entangleStates(state1.getId(), state2.getId());
            
            return FormulaResult.success(
                "üîó Unit√©s intriqu√©es ! Observer l'une affectera l'autre instantan√©ment.",
                Map.of(
                    "unit1", unit1,
                    "unit2", unit2,
                    "state1Id", state1.getId(),
                    "state2Id", state2.getId()
                ),
                "QUANTUM_ENTANGLEMENT"
            );
        } catch (Exception e) {
            return FormulaResult.error("Erreur d'intrication: " + e.getMessage(), "ENTANGLEMENT_ERROR");
        }
    }
    
    /**
     * üèÜ MILLENNIUM CONTROLLER - FOUB PALADIN ULTIMATE
     * 
     * "LUEUR DE FOUB - R√©surrection du Juste"
     * Inspir√© du l√©gendaire rez de masse sous bubulle de WOW
     * 
     * @param context GameContext avec heroId et donn√©es de combat
     * @return FormulaResult avec r√©sultats de l'ultimate
     */
    public FormulaResult executeMillenniumController(GameContext context) {
        Map<String, Object> result = new HashMap<>();
        
        // üéÆ VALIDATION FOUB PALADIN
        String heroId = context.getActiveHeroId();
        if (heroId == null || !heroId.contains("foub")) {
            return FormulaResult.error("üö´ MILLENNIUM CONTROLLER: Seul Foub peut utiliser cet ultimate !", "NOT_FOUB_PALADIN");
        }
        
        // üèõÔ∏è PHASE 1: PROTECTION DIVINE (Bubulle WOW-style)
        result.put("phase_1_protection_divine", true);
        result.put("invulnerability_duration", "10 secondes");
        result.put("divine_bubble_active", true);
        result.put("wow_inspiration", "Protection Divine - Paladin WOW classique");
        
        // ‚ö° PHASE 2: R√âSURRECTION DE MASSE
        List<String> resurrectableAllies = Arrays.asList("vince_vega", "walter_vietnam", "colt_eastwood", "morgana_witch");
        List<String> resurrectedAllies = new ArrayList<>();
        
        // S√©lectionner jusqu'√† 3 alli√©s morts pour r√©surrection
        int maxResurrections = 3;
        int resurrectionsPerformed = 0;
        
        for (String ally : resurrectableAllies) {
            if (resurrectionsPerformed < maxResurrections) {
                // Simuler r√©surrection avec 50% HP + buff al√©atoire
                Map<String, Object> resurrectionData = new HashMap<>();
                resurrectionData.put("ally", ally);
                resurrectionData.put("hp_restored", "50%");
                resurrectionData.put("random_buff", generateRandomBuff());
                resurrectionData.put("timeline_vision", generateTimelineVision(ally));
                
                resurrectedAllies.add(ally);
                resurrectionsPerformed++;
                
                result.put("resurrection_" + resurrectionsPerformed, resurrectionData);
            }
        }
        
        result.put("phase_2_mass_resurrection", true);
        result.put("resurrected_count", resurrectionsPerformed);
        result.put("resurrected_allies", resurrectedAllies);
        
        // üåÄ PHASE 3: FRAGMENTS M√âMOIRE (Timeline alternatives)
        result.put("phase_3_memory_fragments", true);
        result.put("timeline_visions_granted", true);
        result.put("narrative_bonus", "Ressuscit√©s peuvent voir d'autres mondes pour qu√™tes sp√©ciales");
        
        // üò¥ PHASE 4: √âPUISEMENT DIVIN
        result.put("phase_4_divine_exhaustion", true);
        result.put("foub_debuff", "√âtourdi pendant 3 tours");
        result.put("energy_cost", "100% + √©puisement");
        result.put("cooldown", "Une fois par instance (cosmique)");
        
        // üèÜ MILLENNIUM LEGACY
        result.put("millennium_legacy", Map.of(
            "guild_name", "Guilde des Milleniums",
            "former_name", "Tr√©pot",
            "wow_connection", "Directement inspir√© des m√©caniques Paladin WOW",
            "legendary_status", true
        ));
        
        // üéñÔ∏è WALTER APPROVAL
        result.put("walter_approval", "üéñÔ∏è WALTER: Ce rez de masse me rappelle nos √©vacuations au Vietnam ! APPROUV√â !");
        
        // ‚ú® VISUAL EFFECTS
        result.put("visual_effects", Map.of(
            "divine_bubble", "Bubulle dor√©e massive style WOW",
            "resurrection_light", "√âclats lumineux pour chaque ressuscit√©",
            "timeline_flashes", "Visions d'autres mondes pour les ressuscit√©s",
            "exhaustion_aura", "Foub s'affaisse, vid√© de sa force divine"
        ));
        
        return FormulaResult.success(
            "üèÜ MILLENNIUM CONTROLLER ACTIV√â ! Foub invoque la Lueur du Juste - " + 
            resurrectionsPerformed + " alli√©s ressuscit√©s avec visions de timelines alternatives !",
            result,
            "MILLENNIUM_CONTROLLER_ULTIMATE"
        );
    }
    
    /**
     * üé≤ G√©n√©rer un buff al√©atoire pour les ressuscit√©s
     */
    private String generateRandomBuff() {
        String[] buffs = {
            "B√©n√©diction de Force (+25% attaque)",
            "Aura de Sagesse (+25% magie)", 
            "Protection Divine (+25% d√©fense)",
            "Vitesse √âth√©r√©e (+25% vitesse)",
            "Vision Proph√©tique (+25% chance critique)",
            "R√©silience Temporelle (r√©sistance d√©buffs)"
        };
        return buffs[(int) (Math.random() * buffs.length)];
    }
    
    /**
     * üåÄ G√©n√©rer une vision de timeline alternative
     */
    private Map<String, Object> generateTimelineVision(String ally) {
        Map<String, Object> vision = new HashMap<>();
        
        switch (ally) {
            case "vince_vega":
                vision.put("timeline_seen", "Une r√©alit√© o√π Vince devient d√©tective priv√©");
                vision.put("narrative_hook", "Qu√™te sp√©ciale: L'Enqu√™te de Vince");
                break;
            case "walter_vietnam":
                vision.put("timeline_seen", "Une ligne o√π Walter devient g√©n√©ral pacifiste");
                vision.put("narrative_hook", "Qu√™te sp√©ciale: La Paix de Walter");
                break;
            case "colt_eastwood":
                vision.put("timeline_seen", "Un monde o√π Colt devient sh√©rif d'une ville fant√¥me");
                vision.put("narrative_hook", "Qu√™te sp√©ciale: Le Dernier Sh√©rif");
                break;
            case "morgana_witch":
                vision.put("timeline_seen", "Une r√©alit√© o√π Morgana devient gu√©risseuse divine");
                vision.put("narrative_hook", "Qu√™te sp√©ciale: La R√©demption de Morgana");
                break;
            default:
                vision.put("timeline_seen", "Vision d'un monde parall√®le myst√©rieux");
                vision.put("narrative_hook", "Qu√™te sp√©ciale: Le Myst√®re Temporel");
        }
        
        vision.put("vision_clarity", Math.random() * 0.5 + 0.5); // 50-100% clart√©
        vision.put("emotional_impact", "Profond");
        
        return vision;
    }
    
    /**
     * ‚ö° FAST LEARNER 2000% BURST - APPROCHE CORRECTE SANS CONSTANTES
     * 
     * MEMENTO CORRECTION: Utilise les services existants pour calculs dynamiques
     * selon le principe "Langage ‚Üí Pens√©e ‚Üí Action ‚Üí R√©sultat Dual"
     */
    private FormulaResult executeFastLearner2000Burst(GameContext context) {
        Map<String, Object> result = new HashMap<>();
        
        try {
            String heroId = context.getActiveHeroId();
            if (heroId == null) {
                return FormulaResult.error("‚ö†Ô∏è Aucun h√©ros actif pour Fast Learner", "NO_ACTIVE_HERO");
            }
            
            // üåÄ √âTAPE 1: QUANTUM - Cr√©er superposition d'√©tats d'apprentissage
            List<Object> learningStates = Arrays.asList("SLOW", "NORMAL", "FAST", "BURST", "TRANSCENDENT");
            double[] probabilities = {0.05, 0.15, 0.25, 0.35, 0.20}; // Favorise BURST
            
            QuantumService.QuantumState learningState = null;
            if (quantumService != null) {
                learningState = quantumService.createSuperposition(
                    heroId + "_learning", "LEARNING_STATE", learningStates, probabilities
                );
            }
            
            // üåÄ √âTAPE 2: Observer l'√©tat pour obtenir le multiplicateur
            Object finalLearningState = null;
            double learningMultiplier = 1.0;
            
            if (learningState != null && quantumService != null) {
                finalLearningState = quantumService.observeState(learningState.getId(), "FAST_LEARNER_OBSERVER");
                
                // Calculer multiplicateur selon l'√©tat observ√©
                switch (finalLearningState.toString()) {
                    case "SLOW": learningMultiplier = 5.0; break;
                    case "NORMAL": learningMultiplier = 10.0; break;
                    case "FAST": learningMultiplier = 15.0; break;
                    case "BURST": learningMultiplier = 20.0; break; // 2000%
                    case "TRANSCENDENT": learningMultiplier = 25.0; break; // 2500%
                    default: learningMultiplier = 10.0;
                }
            } else {
                // Fallback si QuantumService indisponible
                learningMultiplier = 20.0; // Valeur par d√©faut pour BURST
                finalLearningState = "BURST";
            }
            
            // ‚ö° √âTAPE 3: CAUSAL COLLAPSE - Calculer dur√©e bas√©e sur paradox risk
            long durationMs = 10000; // Valeur par d√©faut
            double paradoxRisk = 0.3;
            
            if (causalCollapseService != null) {
                Map<String, Object> collapseParams = new HashMap<>();
                collapseParams.put("type", "TEMPORAL_ACCELERATION");
                collapseParams.put("intensity", learningMultiplier);
                collapseParams.put("heroId", heroId);
                
                Map<String, Object> collapseResult = causalCollapseService.handleCollapse(
                    "TEMPORAL_DECISION", collapseParams
                );
                
                paradoxRisk = (Double) collapseResult.getOrDefault("paradox_risk", 0.3);
                
                // Dur√©e inversement proportionnelle au risque de paradoxe
                // Plus le risque est √©lev√©, plus la dur√©e est courte
                durationMs = (long) (15000 * (1.0 - paradoxRisk)); // 3-15 secondes
            }
            
            // üïê √âTAPE 4: TEMPORAL DECAY - Calculer cooldown bas√© sur l'√¢ge du jeu
            int cooldownSeconds = 300; // Valeur par d√©faut
            
            // Simulation du calcul bas√© sur le syst√®me temporal (pas d'acc√®s direct au TemporalDecayService)
            // Plus le jeu est ancien, plus le cooldown est court (le h√©ros devient exp√©riment√©)
            long gameAge = System.currentTimeMillis() - context.getGameStartTime();
            long gameAgeHours = gameAge / (1000 * 60 * 60);
            cooldownSeconds = Math.max(60, 300 - (int)(gameAgeHours * 10)); // 60-300 secondes
            
            // üéØ R√âSULTAT FINAL
            result.put("success", true);
            result.put("learning_state_observed", finalLearningState);
            result.put("learning_multiplier", learningMultiplier);
            result.put("learning_percentage", (learningMultiplier * 100) + "%");
            result.put("duration_ms", durationMs);
            result.put("duration_seconds", durationMs / 1000);
            result.put("paradox_risk", paradoxRisk);
            result.put("cooldown_seconds", cooldownSeconds);
            result.put("quantum_collapse_id", learningState != null ? learningState.getId() : "FALLBACK");
            
            // üåü MESSAGE NARRATIF DYNAMIQUE
            String message = String.format(
                "‚ö°üß† FAST LEARNER QUANTIQUE ! √âtat '%s' observ√© ‚Üí Acc√©l√©ration x%.1f pendant %d secondes (Risque paradoxe: %.1f%%)",
                finalLearningState, learningMultiplier, durationMs / 1000, paradoxRisk * 100
            );
            
            return FormulaResult.success(message, result, "FAST_LEARNER_QUANTUM_BURST");
            
        } catch (Exception e) {
            return FormulaResult.error(
                "üö® Erreur quantique Fast Learner: " + e.getMessage(), 
                "QUANTUM_FAST_LEARNER_ERROR"
            );
        }
    }
} 