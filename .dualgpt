Role (GPT-5): React/logic owner

Now
- /unified playable: pickups, encounters, treasure, HUD inventory/buffs
- Map schema: spawners, growth_rules
- Backend contracts stable: game/resources, encounter, treasure

Plan
1) Freeze world6d v1.1 types + validators
2) Create packages/editor-core (no UI deps): state 6D, event bus, event-log+replay
3) Migrate controllers into core; React becomes a thin view over dispatch(event)
4) Add 3 tests: move6d, collapse, artifactApplied
5) Provide fixtures JSONL and snapshot tool for parity React==HTML

Interfaces for Claude
- dispatch(event), subscribe(), getState(), replay(log)
- JSONL event fixtures

Safety
- No new UI libs; keep tokens extraction for later; add CI parity gate

Do now (backend magic)
1) Casting path (frontend already uses real engine)
   - Ensure `MagicStackAPI.java.magicCast` is sole path from React; keep `/api/interstice/cast-formula` only for legacy HTML.
2) Java engine wiring
   - Extend `MagicEngineService.cast` to call Rust temporal grammar service: `/temporal/parse` → normalized AST → `/temporal/execute` with seed/context.
   - Include `outputs {iconic,literary,runic,quantum}`, `effects[]`, `sounds[]`, and `trace_hash` in response.
   - Keep `FormulaRegistryService` TTL cache; prefer `formula_id` with fallback to `formula` text.
3) Rust adapter
   - Expose minimal HTTP endpoints for parser/executor with deterministic seed; return normalized AST + `trace_hash`.
4) Tests
   - Java integration tests for CHRONO_LOCK, DIMENSION_FOLD, REALITY_WEAVE, TIME_DILATION, SHIFT/FORK/MERGE assert stable `trace_hash`.
   - Playwright “Spells Lab” smoke: 4 outputs visible, non-empty `trace_hash`.

Acceptance
- React casts hit `/api/magic/cast`; payload accepts `formula_id`.
- Java returns structured outputs and `trace_hash` from Rust execution.
- 5 integration tests pass; parity `/parity` remains green on 3 scenarios.
